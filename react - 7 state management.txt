





					STATE MANAGEMENT




=================================================================================================================================

How to share state through multiple layers of components within more complex apps.

Perform basic states management using the useContext and a useReducer hooks found in context API. 



API  ---------------	application programming interface. Predefines set of way to interact with code.

CONTEXT API   ------	can be used to  manage state more efficiently across multiple levels of components.
			makes it able to share props without drilling through children....
					~~SAVE THE BABIES!!!~~

PROVIDER   ---------	component that STORE the state

CONSUMER   ---------	component that will USE the state





					


				CREATE/USE CONTEXT
				------------------


The literature is foggy.... import createContext and useContext from react.
	the example make a method call .... React.createContext()
		and a method call ......... React.useContext()


The parent component was saved to a variable and created a component React.createContext.Provider

-	-	-	-	-	-	-	-	-	-	-	-	-
						MealsProvider.js
const MealsContext = React.createContext();

const todaysMeals = [ "Foo", "Bar", "Foobar"];

const MealsProvider = ({children}) => {			<-- children is encapsulated {} holds everything that will get wrapped in 
								MealsProvider component later
	const [meals, setMealsList] = React.useState(todaysMeals);

	return (
		<MealsContext.Provider value={{meals}} >		<-- I think .Provider has to be called so
			{children}						INFO can be passed 
		</MealsContext.Provider>
	)
};

export const useMealsListContext = () => React.useContext(MealsContext);

export default MealsProvider;
-	-	-	-	-	-	-	-	-	-	-	-	-
						MealsList.js
import { useMealsListContext } from '../providers/MealsProvider';

export default const MealsList = () => {
	
	const { meals } = useMealsListContext();	<-- originally useMealsListContext.meals['Foo', 'Bar', 'FooBar']
								destructuring make it easier to access the MEALS
	return (							Also allows for .map() to be used
		<div>
			<h1>Meals List using Context API</h1>
			{meals.map((meal, index) => (		<-- .map() iterates over the array (meals). It returns the value
				<h2 key={index}>{meal}</h2>		and the (index)
			))}
		</div>
	);
}
-	-	-	-	-	-	-	-	-	-	-	-	-
						Counter.js
import { useMealsListContext } from "../providers/MealsProvider";

export default const Counter = () => {
	
	const { meals } = useMealsListContext();
	return (
		<div>
			<h3>Number of meals today: {meals.length}</h3>
		</div>
	)
} 
-	-	-	-	-	-	-	-	-	-	-	-	-
===================================================================================================================================================================




							useReducer




====================================================================================================================================================================

You can think of it as a SUPER POWERED useState. The useReducer starts with a REDUCER function and includes initial STATE.







-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-
							App.js
import { useReducer } from 'react';

const reducer = (state, action) => {
	if (action.type === 'ride') return {money: state.money + 10};	<-- MAYBE... action.type === 'ride' ? {money: state.money + 50} : new Error()
	if (action.type === 'fuel') return {money: state.money - 50};
	return new Error();
}

export default App() {

	const initialState = {money: 100};			<-- THE object literal... ends up... state.money.... THAT HOW TO ACCESS OBJECTS (KEY: VALUE) pairs
	const [state, dispatch] = useReducer(reducer, initialState);	<-- use dispatch method of reducer hook...accepts object literal
										with a single prop (type). set to a matching, action.type
	return (
	<div>
		<h1>Wallet: {state.money}</h1>
		<div>
			<button onClick={() => dispatch({type: 'ride'})}>
				A new customer!
			</button>
			<button onClick={() => dispatch({type: 'fuel'})}>
				Refill the tank!
			</button>
		</div>
	</div>
	)
}
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-















