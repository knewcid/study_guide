



					HOOKS	




=========================================================================================================================================

Hooks are functions introduced into React V-16.8, that allow you to hook into React state and lifestyle features of components.





STATE	------	a components internal data that determines behavior, used to store data that affects that component

STATELESS  --	a component that does not reference any variable.... everything is hard coded. 
		Holds no state, inheritence of state through props.

STATEFULL  --	a component that references a variable to render.  Holds state as internal data... changes due to actions


Since the child component stores no state, it is therefore a stateless component. All of it data comes from props.
The App component store the state which can be change through events and fucntions.

You also observed that although a stateless component can't directly pass state, 
it can still trigger actions that will update the state of other components.





						USESTATE
					==========================

This hook is used to manage the state within a component and keep track of it and it's built directly into React.
So it's functionality is a library that must be imported for use. Similar to how you import that DOM-client,.....



		importReact, { useState } from 'React';


Next it is nessessary to declare a state variable to which data is stored for use/manipulation. Any name can be used, 
but there is a little quirk to remember so that you will fit in. The setter functionality of this hook is best used 
through a process called array destructuring. It returns a pair which is an array with two items.... it's at this point 
that you simplify the variable call to the array object, not needing to call [index]... I think (presumed knowledge).


		const [state, setState] = useState(initialState)

		const [showMenu, setShowMenu] = useState(false)


	-It creates a state variable with an initial value that represents the current state..... showMenu

	-And it creates a function to set that states variable value... setShowMenu

The use case hook should be called at the top level of your components.... so the ENTIRE component has 
access to the INFO.

========================================================================================================================H
-	-	-	-	-	-	-	-	-	-	-	-	-			H
															H
import { useState } from 'react';											H
															H
export default function InputComponent() { 										H
  const [inputText, setText] = useState('hello'); 									H	
															H
  function handleChange(e) { 												H
    setText(e.target.value); 												H
  } 															H
															H
  return ( 														H
    <> 															H
      <input value={inputText} onChange={handleChange} /> 								H
      <p>You typed: {inputText}</p> 											H
      <button onClick={() => setText('hello')}> 									H
        Reset 														H
      </button> 													H
    </> 														H
  ); 															H
} 															H
															H
-	-	-	-	-	-	-	-	-	-	-	-	-			H
															H
To do this, let's define a React component and call it InputComponent. This component renders three things:		H
															H
	-An input text field 												H	
	-Any text that has been entered into the field 									H
	-A Reset button to set the field back to its default state 							H
															H	
As the user starts typing within the text field, the current text that was typed is also displayed.			H
															H
	H===============================H										H
	H	Welcome			H										H
	H===============================H										H	
															H
	You typed: Welcome												H
															H
	H===========H													H
	H  RESET    H		<--clicking the reset button will update the inputText back to “hello”. 		H
	H===========H													H
															H
															H
The state variable inputText and the setText method are used to set the current text that is typed. 			H
The useState hook is initialized at the beginning of the component.							H
															H
	const[inputText, setText] = useState('hello'); <---HELLO is the initial value					H
															H
========================================================================================================================H


Keep in mind that the inputText here is local state and is local to the InputComponent. This means that outside of this 
component, inputText is unavailable and unknown. In React, state is always referred to the local state of a component.



Hooks also come with a set of rules, that you need to follow while using them. This applies to all React hooks, 
including the useState hook that you just learned.

	-You can only call hooks at the top level of your component or your own hooks. 
	-You cannot call hooks inside loops or conditions. 
	-You can only call hooks from React functions, and not regular JavaScript functions. 
	-one can't use the state's setting variable from your state directly. 
		Instead of updating it directly, I can update it based on a click event.... or change event
	 	Because of the way React looks for changes to re-render the DOM

========================================================================================================================H
---------------------------------------------------------------------------------					H
import { useState } from 'react'; 											H
															H
export default function RegisterForm() { 										H
  const [form, setForm] = useState({ 		<-- Notice that you are using a form object to store 			H
    firstName: 'Luke', 					the state of all three text input field values.			H
    lastName: 'Jones', 					You do not need to have three separate state variables 		H
    email: 'lukeJones@sculpture.com', 			in this case, and instead you can consolidate them all 		H
  }); 							together into one form object for better readability.		H
															H
  return ( 														H
    <> 															H
      <label> 														H
        First name: 													H
        <input 														H
          value={form.firstName} 		<-- use dot notation to access keys of the useState			H
          onChange={e => {												H 												
            setForm({ 													H
              ...form, 				<-- setting the form data with .firstName... 				H
              firstName: e.target.value 	    (...form) includes all prior data with the e.target.value	  	H	
            }); 				    otherwise the form state would be overwritten!!!			H
          }} 														H
        /> 														H
      </label> 														H
      <label> 														H
        Last name: 													H
        <input 														H
          value={form.lastName} 											H
          onChange={e => { 												H
            setForm({ 													H
              ...form, 													H
              lastName: e.target.value 											H
            }); 													H
          }} 														H
        /> 														H
      </label> 														H
      <label> 														H
        Email: 														H
        <input 														H
          value={form.email} 												H
          onChange={e => { 												H
            setForm({ 													H
              ...form, 													H
              email: e.target.value 											H
            }); 													H		
          }} 														H
        /> 														H
      </label> 		  ------------ included space...for the data to be presented in <p>				H
      <p> 		  V			Luke Jones (lukejones@sculpture.com)					H	
        {form.firstName}{' '} 												H
        {form.lastName}{' '} 												H	
        ({form.email})													H
      </p> 														H
    </> 														H	
  ); 															H
} 															H
--------------------------------------------------------								H
========================================================================================================================H




					useRef hook
					-----------



=================================================================================================================================================================

		We use the useRef hook to access a child element directly.

When you invoke the useRef hook, it will return a ref object. The ref object has a property named current.

-	-	-	-	-	-	-	-	-
function TextInputWithFocusButton() {
  const inputEl = useRef(null);
  const onButtonClick = () => {
    inputEl.current.focus();		<-- `current` points to the mounted text input element
  };
  return (
    <>
      <input ref={inputEl} type="text" />
      <button onClick={onButtonClick}>Focus the input</button>
    </>
  );
}
-	-	-	-	-	-	-	-	-	

Using the ref attribute on the input element, I can then access the current value and 
invoke the focus() method on it, thereby focusing the input field.

There are situations where accessing the DOM directly is needed, and this is where the useRef hook comes into play.
















