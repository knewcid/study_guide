

			Understanding flexbox


===============================================================================================

Much like the div and box container that you can create using HTML, flexbox is a type of container. 

Flexbox can overcome the limitations caused by containers such as block and inline because it does 

a better job of scaling over larger web pages and also provides more dynamic control of the containers. 

This is because it can grow, shrink and align the items inside it which give better control to the 

programmer over the contents and styling of the items inside the container. 

Before learning about the common layouts built using the flexbox, it is important to understand 

the properties inside it and how flexbox works. Let’s examine some of the important characteristics 

of flexboxes and the properties that can be used to configure them.

Flexbox is single-dimensional, which means you can align it either along a row or a column and it 

is set to row alignment by default. There are two axes, the main and cross-axis, much like the x and 

y-axis used in coordinate geometry. When aligned along the row, the horizontal axis is called the main 

axis and the vertical axis is called the cross axis. For the items present inside the flexbox container, 

the placement starts from the top-left corner moving along the main or horizontal axis. When the row is 

filled, the items continue to the next row. Note that with the help of a property called flex-direction, 

you can instead flip the main axis to run vertically and the cross axis will then be horizontal. 

In such a case, the items will start from top left and move down along the vertical main axis. 

The properties you choose will help better control alignment, spacing, direction and eventually 

styling of the container and items present inside it. 

----------------------------------------------------------------------------------------------------------------



Diagram of a flexbox and all its properties.
________ Main Size/AXIS ____FLEX CONTAINER__________
|___________________________________________________| __
|:-------------: :--------------------------------: |   |
|:  FLEX       : :       FLEX                     : |   |
|:  ITEM       : :        ITEM                    : |   Cross Size/AXIS
|:    1        : :          2                     : |   |
|:             : :                                : |   |
|:             : :                                : |   |
|:-------------: :--------------------------------: |   |
|___________________________________________________|___|-->Cross End
|                                                   |
|                                                   |
L> Main Start                             Main End <|



Let’s now examine some of the important properties that will allow you to configure a flexbox.

  

			Flexbox properties
		---------------------------------


		 Original HTML code:

-	-	-	-	-	-	-	-

1)

<body>
  <div class="flex-container">
    <div class="box box1">  One..</div>
    <div class="box box2">  Two..</div>
    <div class="box box3">  Three..</div>
    <div class="box box4">  Four..</div>
    <div class="box box5">  Five..</div>
    <div class="box box6">  Six..</div>
    <div class="box box7">  Seven..</div>
  </div>

-	-	-	-	-	-	-	-

 Original CSS file: 

-	-	-	-	-	-	-	-

1)

.box{
    background-color: aquamarine;
    border-radius: 5px;
    margin: 2px;
    padding: 10px;
}

-	-	-	-	-	-	-	-

Output:

H========================H
H        1               H 
H========================H   

H========================H
H        2               H 
H========================H  

H========================H
H        3               H 
H========================H  

H========================H
H        4               H 
H========================H  

H========================H
H        5               H 
H========================H  

H========================H
H         6              H 
H========================H  

H========================H
H         7              H 
H========================H                



There are seven div containers inside the HTML file.

The corresponding CSS file contains rules for all seven div tags that have the 

box class. Note how two class names are given for each of the tags, one that is 

common among all classes and another independent of it. The style is applied to all the containers. 

Now let’s add properties to the flex container by converting it into flex. 
------------------------------------------------------------------------------------------------------------------




			display: flex;
		---------------------------

-	-	-	-	-	-	-	-	-

1)

.flex-container{
    display: flex;
}

-	-	-	-	-	-	-	-	-


The output is now seven flex containers that run from left to right starting in the top left corner.

	Output
H=====H H=====H H=====H H=====H H=====H H=====H H=====H
H  1  H H  2  H H  3  H H  4  H H  5  H H  6  H H  7  H
H=====H H=====H H=====H H=====H H=====H H=====H H=====H 






			Alignment properties
		-----------------------------------


 Let’s examine a few alignment properties inside the flex. There are four main properties 

used to align a flex container and items present inside it:  



	justify-content ------------ For item alignment on main axis.

	align-items ---------------- For item alignment on cross axis.

	align-self ----------------- For unique flex items on cross axis.

	align-content -------------- Used for packing flex lines and control over space.


Of these, justify-content and align-items are frequently used for the respective two axis. 

Let’s first examine the use of justify-content which has a value of ‘left’ by default.



			justify-content
		---------------------------

CSS:

-	-	-	-	-	-	-

1)

.flex-container{
    display: flex;
    justify-content: center
}

-	-	-	-	-	-	-


	Output:

||									||
||	H=====H H=====H H=====H H=====H H=====H H=====H H=====H		||
||	H  1  H H  2  H H  3  H H  4  H H  5  H H  6  H H  7  H		||
||	H=====H H=====H H=====H H=====H H=====H H=====H H=====H 	||
||									||


The output for CSS Code with justification in the center



			flex-wrap:
		-----------------------

The default for this property is ‘nowrap’ which means the items will span the entire width of the axis. 

-	-	-	-	-	-	-

1)

.flex-container{
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
}

-	-	-	-	-	-	-


	Output:

||							||
||		H=====H H=====H H=====H			|| 
||		H  1  H H  2  H H  3  H 		||
||		H=====H H=====H H=====H  		||
||		H=====H H=====H H=====H 		||
||		H  4  H H  5  H H  6  H 		||
||		H=====H H=====H H=====H  		||
||			H=====H				||
||			H  7  H				||
||			H=====H 			||
||							||



Output for CSS code with wrapped number boxes justified in the center


The items will now be wrapped to the size of the available viewport. 




			flex-direction: 
		----------------------------


This property is used to set the main axis, which is a ‘row’ by default. 

It basically means you are changing your ‘main’ axis from horizontal rows to vertical columns. 
	

CSS Code:


-	-	-	-	-	-

1)

.flex-container{
    display: flex;
    justify-content: center;
    flex-direction: column;
    flex-wrap: wrap;
}

-	-	-	-	-	-


  Output:



H========================H
H        1               H 
H========================H   

H========================H
H        2               H 
H========================H  

H========================H
H        3               H 
H========================H  

H========================H
H        4               H 
H========================H  

H========================H
H        5               H 
H========================H  

H========================H
H         6              H 
H========================H  

H========================H
H         7              H 
H========================H 



Display of listed number boxes as a flex

The output looks like the original output; however, it is now actually a flex.



 Now let’s align the items again and examine a couple of the other properties mentioned earlier.   




			align-items:
		==============================


The alignment on the cross-axis is done with the help of this property. Let’s change the value for it to 


			‘flex-end’. 
		------------------------

CSS Code:

-	-	-	-	-	-

1)

.flex-container{
    display: flex;
    justify-content: center;
    flex-direction: column;
    flex-wrap: wrap;
    align-items:flex-end;
}

-	-	-	-	-	-


 Output:
||		||
||	  H====H||
||	  H 1  H||	
||	  H====H||
||	  H====H||
||	  H 2  H||
||        H====H||
||	  H====H||
|| 	  H 3  H||
||	  H====H||
||        H====H||
||        H 4  H||
||        H====H||
||        H====H||
||        H 5  H||
||	  H====H||
||        H====H||
||        H 6  H||
||        H====H||
||        H====H||
||        H  7 H||
||        H====H||
||		||


Right-centered number boxes with the flex end aligning method.
  

The term ‘end’ refers to the right side of the page as the left side is seen as the beginning. 




			align-self:
		--------------------------

This property can be used on individual items inside the flex. 

-	-	-	-	-	-

1)

.flex-container{
    display: flex;
    justify-content: center;
    flex-direction: column;
    flex-wrap: wrap;
    align-items:flex-end;
}

.box3{
    background-color: blanchedalmond;
    align-self: center;
}

-	-	-	-	-	-


 Output:       

||		||
||	  H====H||
||	  H 1  H||	
||	  H====H||
||	  H====H||
||	  H 2  H||
||        H====H||
||    H====H    ||
||    H 3  H    ||
||    H====H    ||
||        H====H||
||        H 4  H||
||        H====H||
||        H====H||
||        H 5  H||
||        H====H||
||	  H====H||
||        H 6  H||
||        H====H||
||        H====H||
||        H  7 H||
||        H====H||
||		||
  

Output to display of a change in the color and alignment of individual items
  

Here the color and alignment of the third box have been changed and 

it overrides the properties set using align-items.     




			gap:
		-------------------

gap property can be used to create space between the items along the main axis. 

You can also individually configure the gaps in rows and columns using row-gap and column-gap properties.   

CSS Code:

-	-	-	-	-	-	

1)

.flex-container{
    display: flex;
    justify-content: center;
    flex-direction: column;
    flex-wrap: wrap;
    align-items:flex-end;
    gap:10px;
}
.box3{
    background-color: blanchedalmond;
}

-	-	-	-	-	-	

 Output:


||		||
||	  H====H||
||	  H 1  H||	
||	  H====H||
||		||
||	  H====H||
||	  H 2  H||
||        H====H||
||		||
||    H====H    ||
||    H 3  H    ||
||    H====H    ||
||		||
||        H====H||
||        H 4  H||
||        H====H||
||		||
||        H====H||
||        H 5  H||
||        H====H||
||		||
||	  H====H||
||        H 6  H||
||        H====H||
||		||
||        H====H||
||        H  7 H||
||        H====H||
||		||
  


Display of items with different spacing

There is a clear change in spacing between the items. 



The final set of properties are flex-grow, flex-shrink and flex-basis. 

Together these determine how the flex takes up space, grows or shrinks 

according to the space available.

These are the sub-properties of a property called flex. Together all 

three properties can also be given values with the help of something 

called the shorthand notation in CSS. Shorthand notation helps you make 

your code compact and also easy to write and follow. The values left empty 

in shorthand notation are given their default values. 



	For example:

-	-	-	-	-	-

)

.flex-container{
flex: 0 1 auto;
}

-	-	-	-	-	-



Here for the flex-container class, there is a set rule for the flex property. 

The values correspond to the three properties, namely the flex-grow set to 0, 

flex-shrink to 1 and flex-basis to auto. The flex-basis sets the initial size 

of the container. and together they define the rigidity or flexibility and dynamism 

you want to add to the flexbox. 


To demonstrate the effect of this, the code has to be modified slightly by removing 

the flex-direction value set to ‘column’. This will change it to default ‘row’ and 

the output will again be centrally aligned and horizontal best-distributed between two rows. 


Output:


||  			                     ||
||  H=====H H=====H H=====H H=====H H=====H  ||
||  H  1  H H  2  H H   3 H H  4  H H  5  H  ||
||  H=====H H=====H H=====H H=====H H=====H  ||
||				             ||
||	        H=====H H=====H              ||
||	        H  6  H H  7  H`             ||
||	        H=====H H=====H	             ||


List of items as default raw modified by removing the flex direction

The rest of the remaining code is unchanged. However, the output will 

change if the code is modified with the addition of the flex property 

inside the flex item box3 class. 


CSS Code:

-	-	-	-	-	-	-	-

1)

.box3{
    background-color: blanchedalmond;
    align-self: center;
    flex: 1 1 auto;
}

-	-	-	-	-	-	-	-



 Output:


||			                    ||
||H=====H H=====H H========H H=====H H=====H||
||H  1  H H  2  H H   3    H H  4  H H  5  H||
||H=====H H=====H H========H H=====H H=====H||
||					    ||
||	       H=====H H=====H		    ||
||	       H  6  H H  7  H`		    ||
||	       H=====H H=====H		    ||


Different spacing of items in row display


The third box now takes up the entire free space available because flex-growth’s 

value has been set to 1. So if we have flex-grow set to 1, the children will all 

set to equal size. And if one of the children has a value of 1.5, that child would 

take up more space as compared to the others.

It’s important to understand how the changes in the main and cross axis affect the 

way you imagine and manipulate the flexbox. Once you’ve had more practice you’ll be

more comfortable with the use of these properties, and it will become easier to use 

flexboxes and understand the flow and alignment of items inside the flexbox. 









========================================================================================










				GRID







=======================================================================================


The syntax for creating a grid:

-	-	-	-	-	

1)

selector {
	display: grid;   <------- or inline-grid
}

-	-	-	-	-	





Grid shorthand consists of the following properties with default values:




	grid				A grid will allow you organize the various elements on your page. 

-------------------------------------------------------------------------------------------------------------

	grid-template-rows: none	This feature allows you configure your elements 
					so that they are organized similarly to rows on a table. 

---------------------------------------------------------------------------------------------------------------

	grid-template-columns: none	This feature allows you configure your elements but with 
					this setting the elements are organized like columns on a table. 

---------------------------------------------------------------------------------------------------------------

	grid-template-areas: none	This feature allows you configure the names of a grid 
					and how they sit in relation to one another. 

---------------------------------------------------------------------------------------------------------------

	grid-auto-rows: auto		Default setting for all row sizes that have not been explicitly configured. 

---------------------------------------------------------------------------------------------------------------

	grid-auto-columns: auto		Default setting for all column sizes that have not been explicitly configured. 

---------------------------------------------------------------------------------------------------------------

	grid-auto-flow: row		Default location for rows that are not explicitly allocated. 

---------------------------------------------------------------------------------------------------------------

	column-gap: normal		This sets the gap between the columns

---------------------------------------------------------------------------------------------------------------

	row-gap: normal			This sets the gap between the rows







			Grid properties for container
		------------------------------------------------


grid-template-columns: measurement units OR % units OR repeat()

	Defines the line names, and maintains a constant size of column items. 
	Can accept a range of different measurement sizes.

-------------------------------------------------------------------------------------------------------------------

grid-template-rows: measurement units | % units |repeat()

	Defines the line names, and maintains a constant size of rows. 
	Can accept a range of different measurement sizes.

-------------------------------------------------------------------------------------------------------------------

grid-auto-columns: measurement unit (fixed value for all columns)

	Determines the default size for columns that have not been explicitly configured. 

-------------------------------------------------------------------------------------------------------------------

grid-auto-rows: measurement unit (fixed value for all rows)

	Determines the default size for rows that have not been explicitly configured.

-------------------------------------------------------------------------------------------------------------------

grid-template: “header header” auto

	This allows you define and maintain named cells on a grid 

-------------------------------------------------------------------------------------------------------------------

“main right” 75vh

	This defines two cells named main and right, that have a sizing of 75% of the viewport height. 

-------------------------------------------------------------------------------------------------------------------

“footer footer” 20rem

	This defines two cells named footer and footer, that have a sizing of 20 root em (rem). 
	This defines the size in relation to the html font size. 

-------------------------------------------------------------------------------------------------------------------






			Gap
		-------------------
grid-gap: measurement units

	Determines the gap between rows and columns 

-------------------------------------------------------------------------------------------------------------------

grid-column-gap: measurement units

	Determines the gap between columns

-------------------------------------------------------------------------------------------------------------------

grid-row-gap: m-unit-1  m-unit-2

	Determines the gap between columns

-------------------------------------------------------------------------------------------------------------------



			Alignment
		------------------------

justify-items: start | center | end | stretch

	Defines the default space that is allot to each item on the grid 

-------------------------------------------------------------------------------------------------------------------

align-items: start | center | end | stretch

	Defines the default space related to an item along the grid’s block axis  

-------------------------------------------------------------------------------------------------------------------

place-items: start | stretch /* shorthand for two properties above */

	This feature allows you align items with  the block and inline directions.

-------------------------------------------------------------------------------------------------------------------



			Justification
		---------------------------------

justify-content: start | center | end | stretch | space-between | space-evenly | space-around

	Defines browser allocation of space to content items in relation to the main-axis 

-------------------------------------------------------------------------------------------------------------------

align-content: start | center | end | stretch | space-between | space-evenly | space-around

	Defines browser allocation of space to content items in relation to cross axis and block axis  

-------------------------------------------------------------------------------------------------------------------

place-content: center | start

	This feature allows you align items with  the block and inline directions.

-------------------------------------------------------------------------------------------------------------------




			Positioning
		----------------------------

grid-auto-flow: row | column | dense

	This relates to how the items are placed automatically within the grid

-------------------------------------------------------------------------------------------------------------------

grid-auto-columns: measurement units

	This relates to the size for columns created without specific size specifications 

-------------------------------------------------------------------------------------------------------------------

grid-auto-rows: measurement units

	This relates to the size for rows created without specific size specifications 

-------------------------------------------------------------------------------------------------------------------



			Grid properties for items (child)
		-----------------------------------------------

grid-column: column position /* E.g. 1/2  */

	Allows for specifying where on the grid the column is to start. 

-------------------------------------------------------------------------------------------------------------------

grid-column-start: column start position 

	This property determines the starting column position an item is placed on a grid. 

-------------------------------------------------------------------------------------------------------------------

grid-column-end: column end position 

	This property determines the end column position an item is placed on a grid. 

-------------------------------------------------------------------------------------------------------------------

grid-row: row position /* E.g. 1/2  */

	Allows for specifying where on the grid the row is to start. 

-------------------------------------------------------------------------------------------------------------------

grid-row-start: row start position 

	This property determines the starting row position an item is placed on a grid. 

-------------------------------------------------------------------------------------------------------------------

grid-row-end: row end position 

	This property determines the end row position an item is placed on a grid. 

-------------------------------------------------------------------------------------------------------------------



			Justification and alignment
		-----------------------------------------
justify-self: start | center | end | stretch

	Determines how  an item is positioned inside its aligned container in relation to the appropriate axis. 

-------------------------------------------------------------------------------------------------------------------

align-self: start | center | end | stretch

	Aligns an item within a grid area. 

-------------------------------------------------------------------------------------------------------------------

place-self: start | stretch /* shorthand for two properties above */

	This setting lets one align and justify an item within a block. 

-------------------------------------------------------------------------------------------------------------------

===================================================================================================================





				Grid template area




=====================================================================================================================

Grid areas are a way to group one or more grid cells. The grid template area is an extension of this concept where 
you can give names to these grid areas. Once you have the names defined, you can address these new grid area items 
by their names and configure them accordingly. 

The property grid-template-areas is usually placed inside the body tag or any container where the grid needs to be 
placed, the same way that you would define the rules for the grid. The main difference is, in case of 
grid-template-areas the values present will be the different names. 


Process
The process isn’t prescriptive but these are the steps in general:


	1)Define the grid using display property 

	2)Set the height and width of the grid 

	3)Set the grid-template-areas with the appropriate name identifiers

	4)Add the appropriate sizes for the rows inside the grid using grid-template-rows property 

	5)Add the appropriate sizes for the columns inside the grid using grid-template-columns property 


But how exactly do you use these names and where do they come from? The names that you use inside the grid template 
areas are the HTML tags that you have used. Or, where you need to get more specific, you designate a class name to 
these tags. Once the names are assigned, you define the properties for each class the same way that you define them 
conventionally. Let's examine an example.


Example
		HTML Code:

-	-	-	-	-	-	-	-	-

1)

<head> 
    <link rel="stylesheet" href="gridta.css"> 
</head> 

<body> 
	<header> Header </header> 

    	<nav class="nav-bar"> Navigation </nav> 

   	 <main> Main area </main> 

    	<footer> Footer </footer> 

</body> 

-	-	-	-	-	-	-	-	-



		CSS Code:

-	-	-	-	-	-	-	-	-	

1)

body { 
    display: grid; 
    height: 200px; 
    grid-template-areas: "head head" 
                         "nav  main" 
                         "footer  footer"; 
    grid-template-rows: 30px 1fr 30px; 
    grid-template-columns: 150px 1fr; 
  }    

  header { 
    grid-area: head; 
    background-color: lightsalmon; 
  } 

  .nav-bar { 
    grid-area: nav; 
    background-color: lightblue; 
  }    

  main { 
    grid-area: main; 
    background-color: lightyellow; 
  }   

   footer { 
    grid-area: footer; 
    background-color: firebrick; 
  } 

-	-	-	-	-	-	-	-	-


Output:   


H=========================================================================H
H                     HEADER                                              H
H=========================================================================H
N                                  NM                                     M
N       NAVIGATION                 NM       MAIN AREA                     M
N                                  NM                                     M
N                                  NM                                     M
N                                  NM                                     M
N                                  NM                                     M
N                                  NM                                     M
N                                  NM                                     M
N                                  NM                                     M
N                                  NM                                     M
N                                  NM                                     M
N                                  NM                                     M
N==================================NM=====================================M
F       FOOTER                                                            F
F=========================================================================F  

	Grid-based output presenting "header, navigation, main area, and footer."



Though there are five sets of rules, logically the CSS code is divided into two sections. 
The first is where you define the rules for the grid inside the body selector. And 
second is where you allocate specific rules for the different grid areas. The way these 
grid areas are distributed is according to how you have defined the names inside the 
grid-template-areas property. In the example above the relevant code is: 

-	-	-	-	-	-	-	-

1)

 grid-template-areas: "head head"
                         "nav  main"
                         "footer  footer";

-	-	-	-	-	-	-	-	


The ‘head’ is written twice to imply two columns and the rest of the content follows 
the usual convention. The number of rows will be the number of ‘pairs of quotes’ you 
have used which in this case is three. Namely  “head head”, “nav main” and “footer footer”. 
Once you know the number of rows and columns, the values for those will be set by 
grid-template-rows and grid-template-columns. Since these are three and two respectively 
here, you need to add that many values. The height simply gives the overall value of the 
height for the grid. 

Note that the number of times you wrote “header” did not have to be two. You could write
more of those and if you align the rest of the grid-names correctly, the height and width 
of the grid-areas will be distributed proportionately. 

Let’s return to the example. If you keep all other properties the same but you change the 
grid-template-areas as follows: 

-	-	-	-	-	-	-	-	-	-

1)

grid-template-areas: "head head head"
                         "nav  main main"
                         "footer  footer footer";

-	-	-	-	-	-	-	-	-	-

EXAMPLE... I THINK


H=========================================================================H
H                     HEADER                                              H
H=========================================================================H
N                        NM                                               M
N       NAVIGATION       NM       MAIN AREA                               M
N                        NM                                               M
N                        NM                                               M 
N                        NM                                               M
N                        NM                                               M 
N                        NM                                               M
N                        NM                                               M 
N                        NM                                               M
N                        NM                                               M
N                        NM                                               M
N                        NM                                               M
N========================NM===============================================M
F       FOOTER                                                            F
F=========================================================================F  



The output will remain the same as you have fixed the value of the third row to “30px”. 
The example is simple for the sake of clarity, but if you had used relative values, 
you would’ve seen an observable change in the comparable sizes of nav and main grid-areas. 

Grid-areas are convenient when you have a clear schematic of what you want in a grid. 
It’s also easier to configure individual areas if you can address them by their names. 
Let’s say you are designing a resume on your website, you will be able to name the different 
areas such as ‘Bio’, ‘Education’, ‘Work experience’ and so on. And it’s easier to use these 
labels when you are defining the rules. Creating a block diagram using pen and paper before 
starting to work on a grid is always a good idea. 









=========================================================================================




			Properties for flexbox container




==========================================================================================


		flex-direction: row | row-reverse | column | column-reverse
	------------------------------------------------------------------------------

	It is possible to specify the direction your elements will follow. Traditionally 
	text goes from left to right which is flex’s default setting however it can be set 
	from right to left or even top to bottom. The four flex-direction are:

		row : organized from left to right 

		row-reverse: organized from right to left 

		column: organized from top to bottom

		column-reverse: organized from bottom to top. 




		flex-wrap: wrap | nowrap
	-----------------------------------------

The standard layout is to plot the elements from left to right in a straight line. 
The wrap feature allows you customize this to match the size of the window displaying the page. 

	wrap: Automatically wrap the items with as the window space gets smaller. 

	Nowrap: Default setting, items remain rigid and don’t respond  to adjustments made to the window size.





		align-items: flex-start | flex-end | center |Stretch
   	----------------------------------------------------------------

This determines how the flex items are to be positioned on the page. Items can be aligned in a variety of ways 
Flex-start: Similar to standard writing, items start at the top left-hand corner and are positioned from left to right 

	Flex-end: Position begins in the bottom right hand corner. 

	Center: Item is positioned from the center. 

	Stretch: item expands to fill the container. 





		justify-content: flex-start | flex-end | center | space-between | space-evenly
    	   ---------------------------------------------------------------------------------------


	Justify-content determines the alignment of the flex items. 

	Flex-start: goes from right to left along the main axis. 

	Flex-end: goes from left to right along the main axis. 

	Center: Starting at the middle, alignments expands from there. 

	Space-between: first and last item are flush with the left and right wall respectively, every other item is evenly spaced. 

	Space-evenly: each item is equidistant from each other and the boundary wall 




		Properties for flexbox items (child)
	------------------------------------------------------

flex-grow: factor of flex’s main size  

	This attribute enables the flex container to grow proportionally to the other 
	containers present. 

-------------------------------------------------------------------------------------------------

flex-shrink: factor of flex’s main size

	This allows elements to shrink in relation to items around it.

-------------------------------------------------------------------------------------------------

flex-basis: auto | factor of main’s size | measurement unit

	The sets the initial main size of an item. It can be overridden if other 
	stylized elements are configured. 

-------------------------------------------------------------------------------------------------

order:position in flex /* Set ascending by default */

	The standard positioning of items is by source order, however this feature 
	will enable you to configure where the items appear on the page. 

-------------------------------------------------------------------------------------------------

align-self:  start | center | end | stretch
	
	This determines where on the page the child items will be positioned. 
	Similar to the main flex attributes, start is to the left and end is to the right.

-------------------------------------------------------------------------------------------------













