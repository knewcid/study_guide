
																				toggle switch
																			
																let toggle = () => song.paused ? song.play() : song.pause()

					ASSETS






==============================================================================================================================================

.paused   -----	is a propertry of the audio object that checks the state of playback .... is the song is playing




Assets   ------	all the files that your React app needs to have access to in order to work as intended



			KEEP IT CLEAN!!
			---------------


	--A common way to do this is to add an (assets folder) inside 
	of a source folder and keep all your apps assets there.

	--The general rule for asset storage is that if your app can 
	compile without it, you can keep it in the (public folder). 




-	-	-	-	-	-	-	-	-	-
					showAnimal.js
import cat from './assets/images/cat.jpg';		<-- directly importing the image, and assigning THE LOCATION IN MEMORY the 'cat' variable

export default function showAnimal() {
	return (
		<div>
			<img src={cat} alt='A picture of a cat'/>
		</div>
	);
};
-	-	-	-	-	-	-	-	-	-
			ALTERNATIVELY
~~
	return (
		<div>
			<img src={require('./assets/images/cat.jpg')}  <---- no longer need the import statement.
			alt='A picture of a cat' />				can also designate URL
		</div>
	);
};
-	-	-	-	-	-	-	-	-	-



================================================================================================================




					AUDIO / VIDEO





		================================================================
Works like an image would.... at face value. But that's the way of life. The easy way isn't the right way!!!


		const  myVid = 'SomeWebSiteOrFileName';

		<video src={myVid} width={375} height={250} controls />	

In this example it is extremely straight forward.... but Due to mega sites.... DOING IT THIER WAY....
	there may come a list of RECOMMENDATIONS!!! And the easy way may not be do-able.

Very often, you'd get a code snippet that you can copy and paste. However, a specific implementation 
might be slightly different because you would, for example, like to add it as a separate React component. 
You might be wondering, why do you want to prepare it as a separate component? 

One of the reasons is that:
		---easily switch video by passing the unique ID as a prop
		You can then control the video output that way.

Or go deep dive into the source of all the confusion to make it easier on yourself ;-D 
			search bar React video @ npmjs.org 
website to find some of the frequently downloaded NPM packages. 



Install an npm module to handle the diry work for you.......

	react-player	===	github.com/CookPete/react-player
				6000+ stars	150 + contrubutors	regular updates


	===============================================
	\\					     //
	 \\					    //
	  H		Media packages              H
	  H		----------------            H
	 //		react-player 		    \\
	//					     \\
	================================================

		www.npmjs.com/package/react-player



			npm install react-player


There are a few ways that you can import and use the installed package. 

	
		entire package's functionality
-	-	-	-	-	-	-	-	
	
import ReactPlayer from "react-player";

-	-	-	-	-	-	-	-
---------------------------------------------------------------------------


 			reduce bundle size
-	-	-	-	-	-	-	-

import ReactPlayer from "react-player/youtube";

-	-	-	-	-	-	-	-
----------------------------------------------------------------------------------



Here’s an example of using the react-player packaged in a small React app:

-	-	-	-	-	-	-	-	-	-	-
					App.js
import React from "react";
import ReactPlayer from "react-player/youtube";

const App = () => {
	const vidUrl = "https://www....";

  return (
    <div className='App'>
      	<h1>React Player Example</h1>
	<ReactPlayer 
		url={vidUrl}
		playing={false}
		volume={0.5}
	/>	
    </div>
  );
};
-	-	-	-	-	-	-	-	-	-	-





		8===============================================================8
		8								8	
		8								8
		8								8
		8			Bundling assets				8
		8			---------------				8
		8								8
		8								8
		8===============================================================8

Earlier, you learned what assets are in React and the best practices for storing them in your project folders.
In this reading, you will learn about the advantages and disadvantages of embedding assets, including examples 
of client/server-side assets. You will also learn about the trade-offs inherent in using asset-heavy apps.

The app’s files will likely be bundled when working with a React app. Bundling is a process that takes all 
the imported files in an app and joins them into a single file, referred to as a bundle. Several tools can 
perform this bundling. Since, in this course, you have used the create-react-app to build various React apps, 
you will focus on webpack. This is because webpack is the built-in tool for the create-react-app.

 				

					webpack and why you need it



Simply put, webpack is a module bundler.
Practically, this means that it will take various kinds of files, such as SVG and image files, 
CSS and SCSS files, JavaScript files, and TypeScript files, and it will bundle them together 
so that a browser can understand that bundle and work with it.

					Why is this important?

When building websites, you could probably do without webpack since your project's 
structure might be straightforward: you may have a single CSS library, such as Bootstrap, 
loaded from a CDN (content delivery network). You might also have a single JavaScript file 
in your static HTML document. If that is all there is to it, you do not need to use webpack 
in such a scenario.

However, modern web development can get complex. In turn, all the imported files might 
have their own imported files, and even those might have their imports. This means that 
depending on other files, all of these files can create a dependency graph. The order in 
which all these files are loading is essential. That dependency graph can get so complex 
that it becomes almost impossible for a human to structure a complex project and bundle 
all those dependencies properly.

This is the reason you need tools like webpack.
So, webpack builds a DEPENDENCY GRAPH and bundles modules into one or more files that 
a browser can consume.

While it is doing that, it also does the following: 

	---It converts modern JS code - which can only be understood by modern browsers 
	into older versions of JavaScript so that older browsers can understand your code. 
	This process is known as transpiling. For example, you can transpile ES7 code to 
	ES5 code using webpack.  

	---It optimizes your code to load as quickly as possible when a user visits your web pages. 

	---It can process your SCSS code into the regular CSS, which browsers can understand. 

	---It can build source maps of the bundle's building blocks  

	---It can produce various kinds of files based on rules and templates. This includes HTML files, among others. 

Another significant characteristic of webpack is that it helps developers create modern web apps.
It helps you achieve this using two modes: PRODUCTION mode or DEVELOPMENT mode.

	---development mode, webpack bundles your files and optimizes your bundles for updates 
	so that any updates to any of the files in your locally developed app are quickly re-bundled. 
	It also builds source maps so you can inspect the original file included in the bundled code.

	---production mode, webpack bundles your files so that they are optimized for speed. 
	This means the files are minified and organized to take up the least amount of memory. 
	So, they are optimized for speed because these bundles are fast to download when a user 
	visits the website online.

Once all the source files of your app have been bundled into a single bundle file, then that single 
bundle file gets served to a visitor browsing the live version of your app online, and the entire 
app’s contents get served at once.

This works great for smaller apps, but if you have a more extensive app, this approach is likely 
to affect your site’s speed. The longer it takes for a web app to load, the more likely the visitor 
will leave and move on to another unrelated website. There are several ways to tackle this issue 
of a large bundle.

One such approach is code-splitting, a practice where a module bundler like webpack splits the 
single bundle file into multiple bundles, which are then loaded on an as-needed basis. With the 
help of code-splitting, you can lazy load only the parts that the visitor to the app needs to have 
at any given time. This approach significantly reduces the download times and allows React-powered 
apps to get much better speeds. 

			other ways to tackle these problems. 
			
			 SSR (Server-side rendering).

With SSR, React components are rendered to HTML on the server, and the visitor downloads the finished 
HTML code. An alternative to SSR is client-side rendering, which downloads the index.html file and 
then lets React inject its own code into a dedicated HTML element (the root element in create-react-app). 
In this course, you’ve only worked with client-side rendering. 

Sometimes, you can combine client-side rendering and server-side rendering. This approach results 
in what’s referred to as isomorphic apps.

In this reading, you learned about the advantages and disadvantages of embedding assets, including 
examples of client/server-side assets. You also learned about the trade-offs inherent in the use of 
asset-heavy apps.












