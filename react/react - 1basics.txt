



					REACT



===========================================================================================================

Streamlines the use and build of components. Only a CLIENT SIDE library, will have to interact with other libraries. 
ROUTING AND SERVER CLIENT COMMS =REDUX!!  REUSEABLE CODE!!!!!!! Single page application.

React uses a syntax known as JSX..... Java Script XML. also known as a syntax extension to JS.
	JSX allows for JS code to be written inside HTML. This syntax is placed in the Return statement of a 
	functional component.
React treats capitalized names differently. Components MUST be capitalized.... ex:Heading.js
	React will treat lower case components as HTML elements!!


React Fragment  ------	 component lets you group a list of children without adding extra nodes to the DOM.

COMPONENT   ----------   stand alone part of the UI. Combine into more complex unit to form the website.

STATE   --------------   all the values of all the variables app is working with

Modules    -----------	 stand alone units of code that can be re-used.... simply a series of compenents

export   -------------	 used to make a module available to another file

import   -------------	used to declare that a module is NEEDED to function

transpiling  ---------	interpreting a programming language and translating it to a specific target language

className   ----------	is a sub for the class format in HTML.... class is a reserved word in JSX

props ----------------	represents values passed as arguments as in functional programming.
			used to pass data from object to object with properties object.....props

JS object ------------	used to store data.... with named value: pairs. access properties with dot notation.

pure functions  ------	always return the same ouput for the same argument values... NO SIDE EFFECTS

bundling   -----------	When the browser requests the application, return and load all necessary HTML, CSS and JavaScript immediately.

lazy loading or code splitting
	When the browser requests the application, return only the minimum HTML, CSS and JavaScript needed to 
	load the application. Additional resources are downloaded as required by the application, for example, 
	when a user navigates to a specific section of the application.

array destructuring   --   a way to get individual items from an array of items and save those individual items as separate components
			-  let veggies = [parsley, onion, carrot]; const [v1, v2, v3] = veggies
				v1 = parsley; v2 = onion; v3 = carrot;


object destructuring  ------	 have to destructure a property of an object using that exact properties name 
				as the name of the destructured variable.






					HOW TO
				=====================

		*****	      npm init react-app <file name>		*****

			npm init react-app . <--- this is valid also. The ( . ) instructs VScode to launch in the current folder


This is the termal code for starting up a react application. Whenever you run the npm command to add other 
people's code, that code, and all other Node modules that depend on it, get downloaded to your machine.
However, although it's possible do to so, this is not really necessary, at least in the case of the Node module.... 

			<create-react-app> Node module.

In other words, you can avoid installing the <create-react-app> package but still use it.

You can do that by running the following command: <npm init react-app example>, where “example” is the actual name of your app. 
You can use any name you’d like, but it’s always good to have a name that is descriptive and short.


	A long compiled list of shit prints to the screen....... key take aways:
	---go to the newly made directory  --- cd <file name>
	---start the react engine   ---------- npm start
	---follow the directions for local hosting of the project
	---src is the folder where the app files are stored



	*** npm install	***	will install all missing dependacies for a project, 




					INDEX FILE <Root> -index.js
					-------------------

import React from 'react';			<-- imports the react library to use there special methods
import ReactDOM from 'react-dom/client';		<-- import ReactDom from the .react-dom/client method of the react library
									*i guess thats how the Virtual DOM is created*
import App from '.App.js'			<-- import <App> from another source

ReactDOM.createRoot(
	document.querySelector('#root')
).render(<App />)				<-- every app must conatin the root component <App>

-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-


					App.js
				       --------

function App() {
	return (
		<div className='App'>		   \		<-- className is used to indicate the html class type <div class ="App"></div>
			<h1>Hello React.</h1>	    == JSX syntax... 
		</div>				   /
	);
};


export default App;

-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

					App.js

function Header() {
	return <h1>Hello World</h1>;		<-- JSX element. Typically this function is it's own file exported/imported
};

function App() {
	return <Header />;	<-- IMPORTANT TO STRUCTURE SYNTAX LIKE THIS!!!!
};

export default App;

-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-





				Tree Structure of Components
			---------------------------------------------

						REACT APP
						    |
					    <ROOT /> COMPONENT			<-- <ROOT /> is converted to a DOM fragment, then it is
					   /        |          \			placed into the HTML as a child of a <div id="root"> element.
                                    <HEADER />   <MAIN />     <SIDEBAR />






						FOLDER STRUCTURE
					   ------------------------

NODE MODULE   --------	repo for all modules in app. automatically add when npm package is installed.... other peoples library
			
PUBLIC   ------------	assets that will be displayed to user. image files, favicon ..... displays icon in browser tab.  
				robot.txt which is used for search engine optimization.
				manifest.json is used to provide meta data to a device when your app is install on it
				index.html react is injected into this file. 

SRC   ---------------	all the essential files for the funcionality of the app.

	ROOT FILES

.GITIGNORE --------- 	used in version control... which files and folder are not included in react
	
README.MD   -------- 	markdown file that gives basic info on app... used to tell users through gitHub what happening

PACKAGE.JSON   ----- 	list info about app. allows npm to run scripts on app

PACKAGE-LOCK.JSON ---	holds list of dependicies. help npm rebuild on another machine. there to insure npm tracks all node modules are present






==================================================================================================================================================








			Module Exports
		------------------------------

While all the various syntactical differences are not listed, here are a few examples that will 
cover all the ways that the importing and exporting of JavaScript modules will be done in this course.


	Using default exports  -----  You can have one default export per JavaScript module.
					when the function == file.name

	Using named exports --------  You can export multiple functions in this manner.
					when the function != file.name




		default exports
	      ===================

example:  two ways to perform a default export:

========================================H
	1)				H
					H
export default function addTwo(a, b) {	H
    console.log(a + b);			H
}					H
					H
========================================H

So, in the above example, you’re adding the export 
default keywords in front of the addTwo function declaration.

================================H
	2)			H
				H
function addTwo(a, b) {		H
    console.log(a + b);		H
}				H
				H
export default addTwo;		H
				H
================================H





		Named Exports
	    =====================

Named exports are a way to export only certain parts of a given JavaScript file.
In contrast with default exports, you can export as many items from any JavaScript file as you want.
In other words, there can be only one default export, but as many named exports as you want.


For example

========================================H
1)					H
					H
export function addTwo(a, b) {		H
    console.log(a + b);			H
}					H
					H
export function addThree(a, b, c) {	H
    console.log(a + b + c);		H
}					H
					H
========================================H


================================H
2)				H
				H
function addTwo(a, b) {		H	
    console.log(a + b);		H
}				H
				H
function addThree(a, b, c) {	H
    console.log(a + b + c);	H
}				H
				H
export { addTwo, addThree };	H
				H
================================H






			Importing Modules
		-------------------------------


Just like when exporting modules in JavaScript, there are several ways to import them.
The exact syntax depends on how the module was exported.



You want to import the addTwo.js module into the mathOperations.js module.





		Importing a Module that was Exported as Default
		------------------------------------------------

Consider the previous example of exporting the addTwo function as a default module:

================================H
1)	// addTwo.js module:	H
				H
function addTwo(a, b) {		H
    console.log(a + b);		H
}				H
				H
export default addTwo;		H
				H
================================H

To import it into the mathOperations.js module, you could use the following syntax:

========================================================H
2)		// mathOperations.js module:		H
							H <-- start this import with the IMPORT keyword
import addTwo from "./addTwo";				H	<-- then the NAME under which you’ll use this 
imported code						H		<-- FROM, and finally the LOCATION of the file							
							H
// the rest of the mathOperations.js code goes here	H
							H
========================================================H


So, you could start this import with the import keyword, then the name under which you’ll use this 
imported code inside the mathOperations.js file. You would then type the keyword from, and finally 
the location of the file, without the .js extension.


 
		 Importing a Module that was Exported as Named
		------------------------------------------------

Contrast the above import of the default addTwo export with the different import syntax 
if the addTwo function was instead a NAMED export:

========================================================H
3)			// mathOperations.js module:	H
							H
import { addTwo } from "./addTwo";			H
							H
// the rest of the mathOperations.js code goes here	H
							H
========================================================H





				=============================



					FUNCTION TYPES
				=============================



FUNCTIONAL COMPONETS:
			function Welcome() {
				return <h1>"Hello"</h1>
			};

-------------------------------------------------------------------

CLASS COMPONENT:
		
		class Welcome extends React.Component
		{
			render() {
				return <h1"Hello"</h1>
			};
		};

----------------------------------------------------------------------









					======================



						PROPS



					======================

Used to make code more dynamic. Send the value to pass from the PARENT component as an argument in the form as an HTML attribute .... 


			 ~~~	}render(<App title="INFO" />);        <-- hint the method of replacing a key:value pair 


.... to the CHILD component. It accepts the value/attribute as an argument ( props ). It accesses the properties of this object with dot notation.


			~~~ function App(props) {return <h1>{props.title}</h1>};     <-- the <h1> will display the value from the title property.... INFO


Data flows one way... from the parent down to the child!!

SOMETHING ABOUT PURE FUNCTIONS........when declaring a new function.... it must never modify it's own props.






							PROCESS
					==========================================

In a simple nut shell, the process of drilling and sending information from parent to child is as follows:  I THINK!!!:



	Headings.js
================================================H
export function Headings(props) {		H	<-- Child <Heading /> does what it wants with the parents INFO
	return <h1>{props.title}</h1>		H	
};						H
================================================H

		App.js
================================================H
import { Headings } from "./Headings.js";	H	<-- Parent <App /> give INFO...drills... to the child
						H
export function App(){				H
	return <Headings title= "INFO" />	H
};						H
================================================H






				PROPS.CHILDREN
			------------------------------

Props.children is a special prop which is automatically passed to every component. 
Take into account a bag that hold apples and pears....

-	-	-	-	-	-	-	-	-	-	-
export function Apples (props) {
	return (
		<div className="promo-section">
			<div>
				<h2> These apples are: {props.color}</h2>
			</div>
			<div>
				<h3>There are {props.number} apples.</h3>
			</div>
		</div>
	)
}

-	-	-	-	-	-	-	-	-	-	-	

export funciton Pears(props) {
	return (
		<h2>I don't like pears, but my friend, {props.friend}, does!</h2>
	)
}

-	-	-	-	-	-	-	-	-	-	-	

export Bag function(props) {
	const bag = {				<-- style object literal  CANNOT USE THE ( - )... use camelCase instead.
		padding: "20px",			it is JS for a CSS expression.... 
		border: "1px solid gray",
		background: "#fff",
		margin: "20px 0"
	}
	return (
		<div style={bag}>		<-- inline styling {JS for a CSS exression} 
			{props.children}		<-- I THINK.... since nothing specific is mentioned yet.... Bag is just passing 
		</div>						INFO down... drilling.... something to do with the way the props object would 
	)							acces the data... props.UNKNOWN KEY.INFO!! 
}								~ i wonder if the pear could access data handed to the apple ~

-	-	-	-	-	-	-	-	-	-	-	

import {Apples, Pears, Bag} from

	function App() {
	return (
		<Bag>
			<Apples color="yellow" number="5" />
			<Pears friend="Peter" />
		</Bag>
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=======================================================================================================================================================================
	



			Prop drilling
			-------------


=========================================================================================================================================================================

	Please note that the goal here is not to build an app that would exist in the real world. 
	The goal of this app is to examine the practice of prop drilling, 
	so that you can focus on it and understand it in isolation.


						DON'T ATTEMPT THIS AT HOME!!!!

function Main(props) { 
  return <Header msg={props.msg} />; 
};

function Header(props) { 
  return ( 
    <div style={{ border: "10px solid whitesmoke" }}> 
      <h1>Header here</h1> 
      <Wrapper msg={props.msg} /> 
    </div> 
  ); 
};

function Wrapper(props) { 
  return ( 
    <div style={{ border: "10px solid lightgray" }}> 
      <h2>Wrapper here</h2> 
      <Button msg={props.msg} /> 
    </div> 
  ); 
};

function Button(props) { 
  return ( 
    <div style={{ border: "20px solid orange" }}> 
      <h3>This is the Button component</h3> 
      <button onClick={() => alert(props.msg)}>Click me!</button> 
    </div> 
  ); 
};

function App() { 
  return ( 
    <Main  
      msg="I passed through the Header and the Wrapper and I reached the Button component"  
    /> 
  ); 
}; 

export default App;
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

				OUTPUT
				------

H===============================================H
H	HEADER HERE				H
H						H
HW---------------------------------------------WH
HW	WRAPPER HERE			       WH
HW					       WH
HWB~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~BWH
HWB	BUTTON HERE			      BWH	__________________________
HWB					      BWH	| I passed throught the   |	
HWB					      BWH	| Header and the Wrapper  |	
HWB   ------------			      BWH	| and I reached the       |
HWB   | CLICK ME |	<---------------------BWH-------| Button component        |
HWB   ------------    			      BWH       |_________________________|
HWB~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~BWH
HW---------------------------------------------WH
H===============================================H






This app is simple enough that you should be able to understand it on your own. 
Let’s address the main points to highlight what is happening in the code above.

The top-most component of this app is the App component. 
The App component returns the Main component. 
The Main component accepts a single attribute, named msg, as in “message”.

At the very top of the app, the Main function declares how the Main component should behave. 
The Main component is responsible for rendering the Header component. 

	-Note that when the Header component is rendered from inside Main, it also receives the msg prop.

The Header component’s function declaration renders an h1 that reads “Header here”, 
then another component named Wrapper. 

	-Note that the naming here is irrelevant – the components Header and 
	Wrapper are named to make it a bit more like it might appear in a real app 
	but ultimately, the focus is on having multiple components, rather than 
	describing specific component names properly.

So, the Header component’s function declaration has a return statement, 
which renders the Wrapper component with the msg prop passed to it.

In the Wrapper component’s function declaration, there’s an h2 that reads 
“Wrapper here”, in addition to the rendering of the Button component, 
which also receives the msg attribute.

Finally, the Button component’s function declaration is coded to receive 
the props object, then inside of the wrapping div, show an h3. 
The h3 reads “This is the Button component”, and then, under that, 
there’s a button element with an onClick event-handling attribute. 
This is passed to an arrow function which should alert the string 
that comes from the props.msg prop.




