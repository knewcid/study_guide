



					HOOKS	




=========================================================================================================================================

Hooks are functions introduced into React V-16.8, that allow you to hook into React state and lifestyle features of components.
		---You should only call hooks from the React component!!
		---Hooks should be at the top level of script
			before a return statement, outside of loops, conditions or nested functions
		---are able to call myltiple state or effect hooks
		---Make multiple callins, in the same sequence
			it was wierd... she didnt explain too well.. call you hooks right






STATE	------	a components internal data that determines behavior, used to store data that affects that component

STATELESS  --	a component that does not reference any variable.... everything is hard coded. 
		Holds no state, inheritence of state through props.

STATEFULL  --	a component that references a variable to render.  Holds state as internal data... changes due to actions


Since the child component stores no state, it is therefore a stateless component. All of it data comes from props.
The App component store the state which can be change through events and fucntions.

You also observed that although a stateless component can't directly pass state, 
it can still trigger actions that will update the state of other components.

Stateful components have both props and state. They're in charge of 
		client server, communication, processing data 
and responding to user events. These sorts of logistics should be encapsulated in a moderate number of statefull components.

 all visualization and formatting logic should move downstream into as many stateless components as possible




						USESTATE
					==========================									==========================useState

While it's possible to use any kind of a data structure when working with useState, 
	it's better to use it with primitive data types, such as strings, numbers, or booleans.
		The useReducer hook is best used on more complex data, specifically, arrays or objects
One negative characteristic of useState is that it often gets hard to maintain as the state gets more complex.

This hook is used to manage the state within a component and keep track of it and it's built directly into React.
So it's functionality is a library that must be imported for use. Similar to how you import that DOM-client,.....



		importReact, { useState } from 'React';


Next it is nessessary to declare a state variable to which data is stored for use/manipulation. Any name can be used, 
but there is a little quirk to remember so that you will fit in. The setter functionality of this hook is best used 
through a process called array destructuring. It returns a pair which is an array with two items.... it's at this point 
that you simplify the variable call to the array object, not needing to call [index]... I think (presumed knowledge).


		const [state, setState] = useState(initialState)

		const [showMenu, setShowMenu] = useState(false)


	-It creates a state variable with an initial value that represents the current state..... showMenu

	-And it creates a function to set that states variable value... setShowMenu

The use case hook should be called at the top level of your components.... so the ENTIRE component has 
access to the INFO.

========================================================================================================================H
-	-	-	-	-	-	-	-	-	-	-	-	-			H
															H
import { useState } from 'react';											H
															H
export default function InputComponent() { 										H
  const [inputText, setText] = useState('hello'); 									H	
															H
  function handleChange(e) { 												H
    setText(e.target.value); 												H
  } 															H
															H
  return ( 														H
    <> 															H
      <input value={inputText} onChange={handleChange} /> 								H
      <p>You typed: {inputText}</p> 											H
      <button onClick={() => setText('hello')}> 									H
        Reset 														H
      </button> 													H
    </> 														H
  ); 															H
} 															H
															H
-	-	-	-	-	-	-	-	-	-	-	-	-			H
															H
To do this, let's define a React component and call it InputComponent. This component renders three things:		H
															H
	-An input text field 												H	
	-Any text that has been entered into the field 									H
	-A Reset button to set the field back to its default state 							H
															H	
As the user starts typing within the text field, the current text that was typed is also displayed.			H
															H
	H===============================H										H
	H	Welcome			H										H
	H===============================H										H	
															H
	You typed: Welcome												H
															H
	H===========H													H
	H  RESET    H		<--clicking the reset button will update the inputText back to “hello”. 		H
	H===========H													H
															H
															H
The state variable inputText and the setText method are used to set the current text that is typed. 			H
The useState hook is initialized at the beginning of the component.							H
															H
	const[inputText, setText] = useState('hello'); <---HELLO is the initial value					H
															H
========================================================================================================================H


Keep in mind that the inputText here is local state and is local to the InputComponent. This means that outside of this 
component, inputText is unavailable and unknown. In React, state is always referred to the local state of a component.



Hooks also come with a set of rules, that you need to follow while using them. This applies to all React hooks, 
including the useState hook that you just learned.

	-You can only call hooks at the top level of your component or your own hooks. 
	-You cannot call hooks inside loops or conditions. 
	-You can only call hooks from React functions, and not regular JavaScript functions. 
	-one can't use the state's setting variable from your state directly. 
		Instead of updating it directly, I can update it based on a click event.... or change event
	 	Because of the way React looks for changes to re-render the DOM

========================================================================================================================H
---------------------------------------------------------------------------------					H
import { useState } from 'react'; 											H
															H
export default function RegisterForm() { 										H
  const [form, setForm] = useState({ 		<-- Notice that you are using a form object to store 			H
    firstName: 'Luke', 					the state of all three text input field values.			H
    lastName: 'Jones', 					You do not need to have three separate state variables 		H
    email: 'lukeJones@sculpture.com', 			in this case, and instead you can consolidate them all 		H
  }); 							together into one form object for better readability.		H
															H
  return ( 														H
    <> 															H
      <label> 														H
        First name: 													H
        <input 														H
          value={form.firstName} 		<-- use dot notation to access keys of the useState			H
          onChange={e => {												H 												
            setForm({ 													H
              ...form, 				<-- setting the form data with .firstName... 				H
              firstName: e.target.value 	    (...form) includes all prior data with the e.target.value	  	H	
            }); 				    otherwise the form state would be overwritten!!!			H
          }} 														H
        /> 														H
      </label> 														H
      <label> 														H
        Last name: 													H
        <input 														H
          value={form.lastName} 											H
          onChange={e => { 												H
            setForm({ 													H
              ...form, 													H
              lastName: e.target.value 											H
            }); 													H
          }} 														H
        /> 														H
      </label> 														H
      <label> 														H
        Email: 														H
        <input 														H
          value={form.email} 												H
          onChange={e => { 												H
            setForm({ 													H
              ...form, 													H
              email: e.target.value 											H
            }); 													H		
          }} 														H
        /> 														H
      </label> 		  ------------ included space...for the data to be presented in <p>				H
      <p> 		  V			Luke Jones (lukejones@sculpture.com)					H	
        {form.firstName}{' '} 												H
        {form.lastName}{' '} 												H	
        ({form.email})													H
      </p> 														H
    </> 														H	
  ); 															H
} 															H
--------------------------------------------------------								H
========================================================================================================================H

				The correct way to update the state object in React when using useState
				---------------------------------------------------------------------------------------------------===============================
The suggested approach for updating the state object in React when using useState is to copy the state object and then update the copy.

This usually involves using the spread operator (...).

Keeping this in mind, here's the updated code:

import { useState } from "react"; 
 
		export default function App() { 
		  const [greeting, setGreeting] = useState({ greet: "Hello, World" }); 
		  console.log(greeting, setGreeting); 
 
		  function updateGreeting() { 
		    const newGreeting = {...greeting}; 
		    newGreeting.greet = "Hello, World-Wide Web"; 
		    setGreeting(newGreeting); 
		  } 
 
		  return ( 
		    <div> 
		      <h1>{greeting.greet}</h1> 
		      <button onClick={updateGreeting}>Update greeting</button> 
		    </div> 
		  ); 
		} 
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-
								with an arrow function ()=>{}
		import { useState } from "react"; 
 
		export default function App() { 
		  const [greeting, setGreeting] = useState( 
		    { 
		        greet: "Hello", 
		        place: "World" 
		    } 
		  ); 
		  console.log(greeting, setGreeting); 
 
		  function updateGreeting() { 
		    setGreeting(prevState => { 
		        return {...prevState, place: "World-Wide Web"} 
		    }); 
 		 } 
 
		  return ( 
		    <div> 
		      <h1>{greeting.greet}, {greeting.place}</h1> 
		      <button onClick={updateGreeting}>Update greeting</button> 
		    </div> 
		  ); 
		} 
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	
The reason this works is because it uses the previous state, which is named prevState, 
and this is the previous value of the greeting variable. In other words, it makes a 
copy of the prevState object, and updates only the place property on the copied object. 
It then returns a brand-new object: 


		return {...prevState, place: "World-Wide Web"} 


Everything is wrapped in curly braces so that this new object is built correctly, 
and it is returned from the call to setGreeting.

=====================================================================================================================================================================================




					useRef hook
					-----------



=================================================================================================================================================================

		We use the useRef hook to access a child element directly.

When you invoke the useRef hook, 
	it will return a ref object. 
		The ref object has a property named current.




-	-	-	-	-	-	-	-	-
function TextInputWithFocusButton() {
  const inputEl = useRef(null);
  const onButtonClick = () => {
    inputEl.current.focus();		<-- `current` points to the mounted text input element... This object is the return value of invoking the useRef hook
  };
  return (
    <>
      <input ref={inputEl} type="text" />		<-- React will create the input elements DOM node and render it on the screen.
      <button onClick={onButtonClick}>Focus the input</button>
    </>
  );
}
-	-	-	-	-	-	-	-	-	

Using the ref attribute on the input element, I can then access the current value and 
invoke the focus() method on it, thereby focusing the input field.

There are situations where accessing the DOM directly is needed, and this is where the useRef hook comes into play.




=================================================================================================================================



															U S E 	      / 	C R E A T E 
																C O N T E X T 



					STATE MANAGEMENT




=================================================================================================================================

How to share state through multiple layers of components within more complex apps.

Perform basic states management using the useContext and a useReducer hooks found in context API. 



API  ---------------	application programming interface. Predefines set of way to interact with code.

CONTEXT API   ------	can be used to  manage state more efficiently across multiple levels of components.
			makes it able to share props without drilling through children....
					~~SAVE THE BABIES!!!~~

PROVIDER   ---------	component that STORE the state

CONSUMER   ---------	component that will USE the state





					


				CREATE/USE CONTEXT							==========================C O N T E X T ==========
				------------------
In a nut shell You save state in a global component named UserContextProvider... The provider wrapps
the app component so it can basically send its state down as a prop.... i think


Import createContext, useContext, useState.  All examples so far show the trio being used in tandem.
a naming convention similar to useState is used when assigning createContext a name.

	const UserContext = createContext(undefined); <-- undefined when the initial state is unknown

A Provider JSX function is declared under the same naming convention.... UserProvider in this case.
In the provider function, state is declared with some value.... usually a fetch call, and the return 
of this function is a JSX component that basically links the UserContext to a provider method. Use of 
this function is needed elsewhere.... so export this fucker!!!

	~~return <UserContext.Provider value={{ user }}></UserContext.Provider>;

The value is the state data being sent as a prop. * I think *

A custom hook is also exported as a means for other components to CONSUME this context value.
This external function is created just for convenience, so there's no need to export the user context to external componets.

	export const useUser = () => useContext(UserContext);

Looks like this const IS the prop. Destructure the hook where ever it's consumption is needed.

			const {user} =userUser();
========================================================================================H	
					`UserContext.js`				H
import { createContext, useContext, useState } from 'react';				H
											H	
const UserContext = createContext(undefined);						H
											H
export const UserProvider = ({ children }) => {						H
	const [user] = useState({							H	
		name: 'John',								H
		email: 'john@example.com',						H
		dob: '01/01/2000',							H
	});										H
	return <UserContext.Provider value={{ user }}></UserContext.Provider>;		H		
};											H
											H
export const useUser =() => useContext(UserContext);					H
--------------------------------------------------------------------------		H
				`App.js`						H
import './App.css';									H
import { User Provider } from './UserContext';						H
											H
const LoggedInUser = () => {								H
	const {user} = useUser();							H
	return (									H
		<p>hello <span className='UserName'>{user.name}</span></p>		H
	);										H
}											H
											H
const Header = () => {									H
	return (									H
		<header>								H
			<h2>Blog App</h2>						H
			<LoggedInUser />						H
		</header>								H		
	);										H
}											H
											H
const Page = () => {									H
	const {user} = useUser();							H
											H
	return (									H
		<div>									H
			<h1>Title</h1>							H
			<p>Some Longg ASS paragraph.... blahh blahh</p>			H
			<p>Written by {user.name}</p>					H
		</div>									H
	)										H
}											H
											H
function App () {									H	
	return (									H
		<div className='App'>							H
			<Header />							H
			<Page />							H
		</div>									H
	);										H
}											H
											H	
function Root() {									H
	return (									H
		<UserProvider>								H
			<App />								H	
		</UserProvider>								H
	);										H
}											H
											H
export default Root;									H
========================================================================================H




The parent component was saved to a variable and created a component React.createContext.Provider

-	-	-	-	-	-	-	-	-	-	-	-	-
						MealsProvider.js
const MealsContext = React.createContext();

const todaysMeals = [ "Foo", "Bar", "Foobar"];

const MealsProvider = ({children}) => {			<-- children is encapsulated {} holds everything that will get wrapped in 
								MealsProvider component later
	const [meals, setMealsList] = React.useState(todaysMeals);

	return (
		<MealsContext.Provider value={{meals}} >		<-- I think .Provider has to be called so
			{children}						INFO can be passed 
		</MealsContext.Provider>
	)
};

export const useMealsListContext = () => React.useContext(MealsContext);

export default MealsProvider;
-	-	-	-	-	-	-	-	-	-	-	-	-
						MealsList.js
import { useMealsListContext } from '../providers/MealsProvider';

export default const MealsList = () => {
	
	const { meals } = useMealsListContext();	<-- originally useMealsListContext.meals['Foo', 'Bar', 'FooBar']
								destructuring make it easier to access the MEALS
	return (							Also allows for .map() to be used
		<div>
			<h1>Meals List using Context API</h1>
			{meals.map((meal, index) => (		<-- .map() iterates over the array (meals). It returns the value
				<h2 key={index}>{meal}</h2>		and the (index)
			))}
		</div>
	);
}
-	-	-	-	-	-	-	-	-	-	-	-	-
						Counter.js
import { useMealsListContext } from "../providers/MealsProvider";

export default const Counter = () => {
	
	const { meals } = useMealsListContext();
	return (
		<div>
			<h3>Number of meals today: {meals.length}</h3>
		</div>
	)
} 
-	-	-	-	-	-	-	-	-	-	-	-	-
													memo is important ~~~!!!!~~~



					React.memo	/	usememo
				---------------------------------------------
		============================================================================				==============================================< M E M O >========
				How re-rendering works with Context

In this reading you will learn about the default behavior of React rendering and when context is used. 
You will discover how to prevent unnecessary top-level re-renders with React.memo and how object references 
work in JavaScript. You will also learn how to utilize the useMemo hook to guarantee object references don’t 
change during re-rendering.

So far, you have learned that when a component consumes some context value and the value of this context changes, that component re-renders.

But what happens with all components in between? Is React wise enough to only re-render the consumers and 
bypass the intermediary components in the tree? Well, as it turns out, that doesn’t always happen and extra 
care should be taken when designing your React Context.

When it comes to the default behavior of React rendering, if a component renders, React will recursively 
re-render all its children regardless of props or context. Let’s illustrate this point with an example that uses some context.

Imagine the following component structure, where the top level component injects a Context provider at the top: 

	App (ContextProvider) > A > B > C
-	-	-	-	-	-
	const App = () => {
	return (
	   <AppContext.Provider>
	     <ComponentA />
	   </AppContext.Provider>
	 );
	};
	
	const ComponentA = () => <ComponentB />;
	const ComponentB = () => <ComponentC />;
	const ComponentC = () => null;
-	-	-	-	-	-

If the outermost App component re-renders for whatever reason, all ComponentA, ComponentB and ComponentC 
components will re-render as well, following this order: 

	App (ContextProvider) -> A -> B -> C

If some of your top level components are complex in nature, this could result in some performance hit. 
To mitigate this issue, you can make use of the top level API React.memo().

If your component renders the same result given the same props, you can wrap it in a call to 
React.memo for a performance boost by memoizing the result.

Memoization is a programming technique that accelerates performance by caching the return values of expensive function calls.

This means that React will skip rendering the component, and reuse the last rendered result. 
This is a trivial case for ComponentA, since it doesn’t receive any props.

		const ComponentA = React.memo(() => <ComponentB />);

	---React.memo takes the component definition as a first argument. 
	---An optional second argument can be included if you would like to specify some custom 
	logic that defines when the component should re-render based on previous and current props.

After that little adjustment, you will prevent any rendering from happening in all ComponentA, ComponentB and ComponentC if the App component re-renders.

-	-	-	-	-	-	-	-
	const App = () => {
	return (
	   <AppContext.Provider>
	     <ComponentA />
	   </AppContext.Provider>
	 );
	};

	const ComponentA = React.memo(() => <ComponentB />);
	const ComponentB = () => <ComponentC />;
	const ComponentC = () => null;
-	-	-	-	-	-	-	-

	***A good rule of thumb is to wrap the React component right 
		after your context provider with React.memo.****

In real-life applications, you will find yourself in need of passing several pieces of data as context value, 
rather than a single primitive like a string or number, so you’ll be working most likely with JavaScript objects.

Now, according to React context rules, all consumers that are descendants of a provider will 
re-render whenever the provider’s value prop changes.

Let’s go through the following scenario built upon the previous example, where the 
context value that gets injected is defined as an object called value with two properties, 
‘a’ and ‘b’, being both strings. Also, ComponentC is now a consumer of context, so any time 
the provider value prop changes, ComponentC will re-render.

-	-	-	-	-	-	-	-
	const App = () => {
	  const value = {a: 'hi', b: 'bye'};
	  return (
	    <AppContext.Provider value={value}>
	      <ComponentA />
	    </AppContext.Provider>
	  );
	};

	const ComponentA = React.memo(() => <ComponentB />);
	const ComponentB = () => <ComponentC />;
	const ComponentC = () => {
	  const contextValue = useContext(AppContext);
	  return null;
	};
-	-	-	-	-	-	-	-

Imagine that the value prop from the provider changes to {a: ‘hello’, b: ‘bye’}.

If that happens, the sequence of re-renders would be:

	App (ContextProvider) -> C

That’s all fine and expected, but what would happen if the App component re-renders 
for any other reason and the provider value doesn’t change at all, being still {a: ‘hi’, b: ‘bye’}? 

It may be a surprise to you to find out that the sequence of re-renders is the same as before:

	App (ContextProvider) -> C

Even though the provider value doesn’t seem to change, ComponentC gets re-rendered.

To understand what’s happening, you need to remember that in JavaScript, the below assertion is true:

	***	{a: ‘hi’, b: ‘bye’} !== {a: ‘hi’, b: ‘bye’}	***

That is because object comparison in JavaScript is done by reference. 
Every time a new re-render happens in the App component, a new instance of the value object is created, 
resulting in the provider performing a comparison against its previous value and determining that 
it has changed, hence informing all context consumers that they should re-render.

This problem can be resolved by using the useMemo hook from React as follows. 


-	-	-	-	-	-	-	-	-	-
	const App = () => {
	  const a = 'hi';
	  const b = 'bye';
	  const value = useMemo(() => ({a, b}), [a, b]);

	  return (
	    <AppContext.Provider value={value}>
	      <ComponentA />
	    </AppContext.Provider>
	  );
	};

	const ComponentA = React.memo(() => <ComponentB />);
	const ComponentB = () => <ComponentC />;
	const ComponentC = () => {
	  const contextValue = useContext(AppContext);
	  return null;
	};
-	-	-	-	-	-	-	-	-	-

Hooks will be covered in depth in the next module, so don’t worry too much if this is new for you.

For the purpose of this example, it suffices to say that useMemo will memoize the returned value 
from the function passed as the first argument and will only re-run the computation if any of the 
values are passed into the array as a second argument change.

With that implementation, if the App re-renders for any other reason that does not change 
any of ‘a’ or ‘b’ values, the sequence of re-renders will be as such:

	App (ContextProvider)

This is the desired result, avoiding an unnecessary re-render on ComponentC. 
useMemo guarantees keeping the same object reference for the value variable and since 
that’s assigned to the provider’s value, it determines that the context has not changed 
and should not notify any consumer.











===================================================================================================================================================================




							useReducer




====================================================================================================================================================================

You can think of it as a SUPER POWERED useState. The useReducer starts with initial STATE and includes a REDUCER function.
This is beneficial because the reducer functions second argument is the action object.
This object has multiple type values, and based on each of these types values, you can 
invoke the dispatch function to perform a specific operation.


The reducer function takes in the previous state and an action and returns the new state.
The action type determines the specific action of the reducer. Actions can have any form. By convention, 
it's common to pass objects with a type property identifying the action. You should include the 
minimal necessary information that the reducer needs to compute the next state.




-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-
							App.js
import { useReducer } from 'react';

const reducer = (state, action) => {
	if (action.type === 'ride') return {money: state.money + 10};	<-- MAYBE... action.type === 'ride' ? {money: state.money + 50} : new Error()
	if (action.type === 'fuel') return {money: state.money - 50};		REDUCER IS SORRTA LIKE CLICKHANDLER function
	return new Error();
}

export default App() {

	const initialState = {money: 100};			<-- THE object literal... ends up... state.money.... THAT HOW TO ACCESS OBJECTS (KEY: VALUE) pairs
	const [state, dispatch] = useReducer(reducer, initialState);	<-- use dispatch method of reducer hook...accepts object literal
										with a single prop (type). set to a matching, action.type
	return (
	<div>
		<h1>Wallet: {state.money}</h1>
		<div>
			<button onClick={() => dispatch({type: 'ride'})}>
				A new customer!
			</button>
			<button onClick={() => dispatch({type: 'fuel'})}>
				Refill the tank!
			</button>
		</div>
	</div>
	)
}
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-






========================================================================================================================================\
                                                                                                                                         \	              useEffect( ()=> {
                                                                                                                                          \       		 if (data !== '') {
                                                                                                       useEffect                           }>--x	   	    setData('test data')
                                                                                                                                          /     \		 };
                                                                                                                                         /       \_________   })
========================================================================================================================================/         



side effect   ------------- a side effect can be thought of as something external to or outside of a function. 
				it will do things such as 
							Updating a Browser tab,
							invoke console log, 
							invoke fetch or 
							invoke browsers geolocation functionality.
								^^^those commands 
									---will perform or display something different
										depending on the syntax location in the string of code 
									---are methods of the DOM, which exist outside of your code....React.
										 browser application programming interface or BROWSER API


So how should you deal with the issue of impure functions in react. 
Well, it's all about containing the impure actions inside their own special areas. 
To do this and react you need 
			      to 
				 use 
				     the 
					 useEffect hook.
First, you need to import the use Effect hook from react. 
	The useEffect hook works by accepting two parameters. 
							----The first is a callback function. 
useEffect(()=>{console.log(total)},[]);			----The second parameter is an array. 
							  ^-This array can be kept empty which is 
							    perfectly valid, while the syntax is valid. 
It's common to use an arrow function as the first argument of the invocation of the use Effect hook. 
	Note that the use Effect has been simplified to a single line of code. 

		


You have been introduced to the primary usage of the useEffect hook, a built-in React hook 
best suited to perform side effects in your React components.

		---dependency array 
		---different useEffect calls that can be used to separate different concerns. 
		---clean up resources and free up memory in your useEffect logic by returning a function.

The code you place inside the useEffect hook always runs after your component mounts 
or, in other words, after React has updated the DOM. In addition, depending on your 
configuration via the dependencies array, your effects can also run when certain 
state variables or props change. 

		***By default, 
		    ***if no second argument 
			***is provided to the useEffect function, 

		the effect will run after every render.
============================================================================
useEffect(() => { 
   document.title = 'Little Lemon';
 }); 
-	-	-	-	-	-	-	-	-	-	-

However, that may cause performance issues, especially if your side effects are computationally intensive. 
A way to instruct React to skip applying an effect is passing an array as a second parameter to useEffect.
In the below example, the integer variable version is passed as the second parameter. 
That means that the effect will only be re-run if the version number changes between renders.

		useEffect(() => { 
		  document.title = `Little Lemon, v${version}`;
		}, [version]); 		<----------------- Only re-run the effect if version changes 


If version is 2 and the component re-renders and version still equals 2, 
React will compare [2] from the previous render and [2] from the next render. 
Since all items inside the array are the same, React would skip running the effect.

================================================		Use multiple Effects to Separate Concerns		============================================

React doesn’t limit you in the number of effects your component can have. 
In fact, it encourages you to group related logic together in the same 
effect and break up unrelated logic into different effects.


		function MenuPage(props) { 
		  const [data, setData] = useState([]); 

		  useEffect(() => { 
		    document.title = 'Little Lemon'; 
		  }, []); 

		  useEffect(() => { 
		    fetch(`https://littlelemon/menu/${id}`) 
		      .then(response => response.json()) 



Multiple hooks allow you to split the code based on what it is doing, improving code readability and modularity.


				Effects with Cleanup
				---------------------
Some side effects may need to clean up resources or memory that is not required anymore, 
avoiding any memory leaks that could slow down your applications. For example, you may 
want to set up a subscription to an external data source. In that scenario, it is vital 
to perform a cleanup after the effect finishes its execution.

How can you achieve that? In line with the previous point of splitting the code based 
on what it is doing, the useEffect hook has been designed to keep the code for 
adding and removing a subscription together, since it’s tightly related. 

	If your effect returns a function, 
		React will run it when it’s time to clean up resources 
			and free unused memory.


		function LittleLemonChat(props) { 
		  const [status, chatStatus] = useState('offline'); 

		  useEffect(() => { 
		    LemonChat.subscribeToMessages(props.chatId, () => setStatus('online')) 

		    return () => { 
		      setStatus('offline'); 
		      LemonChat.unsubscribeFromMessages(props.chatId); 
		    }; 



Returning a function is optional and it’s the mechanism React provides 
in case you need to perform additional cleanup in your components.
React will make sure to run the cleanup logic when it’s needed. 
The execution will always happen when the component unmounts. 

However, in effects that run after every render and not just once, 
	 React will also clean up the effect from the previous render 
	 before running the new effect next time.

			Conclusion
In this lesson, you learned some practical tips for using the built-in Effect hook. 
In particular, you were presented with how to use the dependency array properly, 
how to separate different concerns in different effects, 
and finally how to clean up unused resources 
by returning an optional function inside the effect.


import React from 'react';
import './App';

export default function App {
	const [toggle, setToggle] = React.useState(false);

	const clickHandler() {											_____=dependency array determines when the useEffect hook will be invoked
		setToggle(!toggle);										//		if left empty, then useEffect runs at startup... and never again.
	}													|                		 NOTHING === NOTHING
														v		         if nothing changes, nothing happens
	React.useEffect(()=>{document.title = toggle ? "Welcome to Little Lemon" : "Using the useEffect hook", [ ] });
														^__	
	return(													   \---if toggle is passed in as the 2nd argument... whenever the 
		<div>													state of toggle changes, then the useEffect will trigger!!!
		   <h1>Using the Effect Hook</h1>									  
		   <button onClick={clickHandler}>
			Toggle Message
		   </button>
		   {toggle && <h2>Welcome to Little Lemon</h2>}
		</div>
	)
}
-	-	-	-	-	-	-	-	-	-	-





===========================================================================================================================================================================






								C U S T O M 
									H O O K S





==================================================================================================================================================================================


React has some built-in hooks, such as the useState hook, or the useRef hook, which you learned about earlier. 
However, as a React developer, you can write your own hooks. So, why would you want to write a custom hook?

In essence, hooks give you a repeatable, streamlined way to deal with specific requirements in your React apps. 
For example, the useState hook gives us a reliable way to deal with state updates in React components.

A custom hook is simply a way to extract a piece of functionality that you can use again and again. 
Put differently, you can code a custom hook when you want to avoid duplication or when you do not want 
to build a piece of functionality from scratch across multiple React projects. By coding a custom hook, 
you can create a reliable and streamlined way to reuse a piece of functionality in your React apps.

To understand how this works, let's explore how to build a custom hook. To put this in context, let's also code a very simple React app.


-	-	-	-	-	-	-	-	-	-	-	-	
					App.js

	import { useState } from "react"; 
 
	function App() { 
	  const [count, setCount] = useState(0); 
 
	  function increment() { 
	    setCount(prevCount => prevCount + 1) 
	  } 
 
	  return ( 
	<div> 
	      <h1>Count: {count}</h1> 
	      <button onClick={increment}>Plus 1</button> 
	    </div> 
	  ); 
	} 
 
	export default App; 
-	-	-	-	-	-	--	-	-	-	-=	-	-


This is a simple app with an h1 heading that shows the 
						value of the count state variable 	
									and a button 
with an onClick event-handling attribute which, when triggered, invokes the increment() function.

The hook will be simple too. It will console log a variable's value whenever it gets updated.

Remember that the proper way to handle console.log() invocations is to use the useEffect hook.

So, this means that my custom hook will:

		---Need to use the useEffect hook and 
		---Be a separate file that you'll then use in the App component. 


			How to name a custom hook
			--------------------------
A custom hook needs to have a name that begins with USE.
Because the hook in this example will be used to log values to the console, 
let’s name the hook 
			useConsoleLog.


				Coding a custom hook
				---------------------
Now's the time to explore how to code the custom hook.

First, you’ll add it as a separate file, which you can name useConsoleLog.js, 
and add it to the root of the src folder, in the same place where the App.js component is located.


-	-	-	-	-	-	-	-	-	-	-	-	-	
						useConsoleLog.js
	import { useEffect } from "react";
	
	function useConsoleLog(varName) {
	  useEffect(() => {
	    console.log(varName);
	  }, [varName]);
	}

	export default useConsoleLog;
-	-	-	-	-	-	-	-	-	-	-	-	-	-	


				Using a custom hook
				--------------------
Now that the custom hook has been coded, you can use it in any component in your app.
Since the app in the example only has a single component, named App, you can use it to update this component.

The useConsoleLog hook can be imported as follows:

		import useConsoleLog from "./useConsoleLog";

And then, to use it, under the state-setting code, I'll just add the following line of code:

		useConsoleLog(count);


	completed code  
-	-	-	-	-	-		-	-	-
					App.js 


	import { useState } from "react";
	import useConsoleLog from "./useConsoleLog";

	function App() {
	  const [count, setCount] = useState(0);
	  useConsoleLog(count);

	  function increment() {
	    setCount(prevCount => prevCount + 1);
	  }
	return (
	    <div>
	      <h1>Count: {count}</h1>
	      <button onClick={increment}>Plus 1</button>
	    </div>
	  );
	}

	export default App;
-	-	-	-	-	-	-	-	-	-	-	


This update confirms the statement made at the beginning of this reading, which is that custom hooks 
are a way to extract functionality that can then be reused throughout your React apps





