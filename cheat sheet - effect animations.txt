


				EFFECTS


===================================================================================


change that is the result of an action or cause.

PROS: keep attention of user, highlight features, improve aesthetics, helps intuitive/easy navigation
CONS: distracting, drive users away, increase size.... slow loading



GIFS	gaphics interchange form..	the attempt to bring effects to the web
FLASH	added audio and video components.... needed special brower plug in
CSS	made easy to learn SVG



HOVER	 		check study guide for pseudo-classes
CURSOR 			add animated effects to the cursor
SLIDESHOWS		display collections of images
VIDEO BACKGROUND	added to top of screen to illistrate movement
PARALLAX		perseption of depth and deminsion, forground elements move faster than background element
BACK TO TOP		enable quick scroll to top of page
FULL SCREEN SNAPPING	quick transition form one page to another while scrolling 
ELEMENT AND COLOR	emphasize focus on objects




			TEXT EFFECTS
		------------------------------

The visual representation of text content can be changed by four main properties: 
text-transform, font-style, font-weight and text-decoration.


   Property 	            Values		          Description
  -----------            -----------                     ----------------	

Text-transform		None, uppercase, 
			lowercase, capitalize, 		Modify text properties
			full-width			
-	-	-	-	-	-	-	-	-	-	-	-	-

Font-style		Normal, italic, oblique		Font styling options such as italics 
-	-	-	-	-	-	-	-	-	-	-	-	-

Font-weight		Normal, weight, lighter, 	Other font styling options like change 
			bolder, 100-900			of emphasis such as making text bold
-	-	-	-	-	-	-	-	-	-	-	-	-	

Text-decoration		None, underline, overline, 	Shorthand for auxiliary elements added to
			line-through			text using other properties such as 
							text-decoration-line
-	-	-	-	-	-	-	-	-	-	-	-	-
	
							

The additional properties that help configure styling effects are below.

	Text-align					For horizontal alignment of text
      --------------				       -----------------------------------

Text-align-last					Alignment for the last line when text set to justify
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	

Text-combine-upright				Multiple characters into the space of a single character placed upright like in Mandarin
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

Text-decoration-color				Color configuration of the text-decoration
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

Text-decoration-line				Line type in text-decoration such as underline, overline and so on
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	

Text-decoration-style				Styles added to lines under text such as wavy, dotted and so on
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

Text-decoration-thickness			Thickness of the decoration line
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

Text-emphasis					Shorthand for other properties such as color and style 
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

Text-indent					The indentation of the first line 
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

Text-justify					Specifies the justification method used when text-align is "justify"
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

Text-orientation				Orientation of text in a line such as sideways, upright and so on
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

Text-shadow					Adds shadow to text 
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

Text-underline-position				Declare position of underline set using the text-decoration property
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-




Other than these, there are some more properties that help modify the alignment and define the scope of text with their containers. 



       Property 		Values				Description
     ------------             ----------                      ----------------

Text-overflow		Clip, ellipsis			Determines overflow behavior of text with the container
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

Word-wrap		Normal, anywhere, break-word	Applies to inline elements, alias for overflow-wrap
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

Word-break		Normal, break-all, keep-all, 
			break-word			Used for long words to decide if words should break or overflow
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

Writing-mode		Horizontal-tb, vertical-lr, 
			vertical-rl			Can set the text direction vertical or horizontal
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-



The properties mentioned are ones that can be used for giving effects to text. 	


















				ANIMATION


================================================================================


graphics in motion transitioning over time





transform	
		modifies spacial position of the element..... change scale and angle
			element {transform: value;}
-	-	-	-		-	-	-	-	-	-	

transition 	
		modifies the speed of effect
			element {transition: value;}
-	-	-	-	-	-	-	-	-	-	-
========================================================================================H
EXAMPLE:										H
											H
	to have the h1 element rotate 20 deg while cursor is hovering over item		H
											H
	without the transition element is happenes instantly				H
											H
											H
-	-	-	-	-	-	-	-	-	-		H
											H
1)											H
											H
h1 {transform: rotate(0deg); transition: transform 2s;}					H
h1:hover{transform: rotate(20deg);}							H
											H
-	-	-	-	-	-	-	-	-	-		H
========================================================================================H




				TRANSFORM PROPERTIES
	  		    ----------------------------	



	Syntax							Example
    -------------					------------------------
	
transform: transform function-values		.sample-class {transform: rotate(60deg);
-	-	-	-	-	-	-		-	-	-	-	-	-	-

Keyword-value type: none			.sample-class {transform: none;}
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-
		
matrix(), matrix3d()			.sample-class {transform: matrix(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);}
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

rotate(), rotate3d(), rotateX(), 
rotate(), rotateZ()			.sample-class {transform: rotate3d(3,2,1, 100deg);}

	Note: In rotate3d(), the respective values represent x, y, z co-ordinate and degree of rotations
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

translate(), translate3d(), translateX(), 
translateY(), translateZ()		.sample-class {transform: translate3d(10px, 20px, 30px);}

	Note: In translate3d(), the respective values represent translation along the x, y, z co-ordinates
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

scale(), scale3d(), scaleX(), 
scaleY(), scaleZ()			.sample-class {transform: scale3d(2, 1, 0.3);}
	
	Note: In scale3d(), the respective values represent scaling times along the x, y, z co-ordinates
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

skew(), skewX(), skewY()		.sample-class {transform: skew(100deg);}
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-


				Global value types:
			---------------------------------

.sample-class {transform: inherit;}
-	-	-	-	-	-	-	-

.sample-class {transform: initial;}
-	-	-	-	-	-	-	-

.sample-class {transform: revert;}
-	-	-	-	-	-	-	-

.sample-class {transform: revert-layer;}
-	-	-	-	-	-	-	-

.sample-class {transform: unset;}
-	-	-	-	-	-	-	-



			Multiple transform over the same element
		-------------------------------------------------------

Transform can be applied for rotate(), scale() and translate() that can be listed together. 
Each of these properties can have their own values and the actions will give a combined effect. 

 
.sample-class {transform: rotate(45deg) scale(1.5) translate(45px);}


	Additional property under transform:transform-origin
	Determines the anchor point for the centering of transform.

.sample-class {transform-origin: 10px 10px;}
-	-	-	-	-	-	-	-	-

.sample-class {transform-origin: right bottom;}
-	-	-	-	-	-	-	-	-
===============================================================================================================





					Transition property
				   ------------------------------

				Transition shorthand 

Transition shorthand has four following sub-properties, each of which can also be individually defined. 

	-----	transition-property
	
	-----	transition-duration

	-----	transition-timing-function

	-----	transition-delay


You have to list the values without naming them individually. Values skipped will be assigned their default values. 

				Syntax
			       =======

		transition: property duration timing-function delay;

		transition: margin-left 2s ease-in-out 0.5s;





			@ - RULES

=====================================================================================

	@ rules are statements inside CSS that describe how to behave or perform certain actions







			KEY FRAME RULE
		----------------------------

@keyframes are part of the animation sequence and help in defining the steps inside it



	@keyframes animationname {keyframes-selector {css-styles;}}
	|______________________| |________________________________|
	NAME OF ANIMATION <=|		|=>KEY FRAME SELECTOR AND CSS STYLE... KEYWORDS



@keyframe   	----specifies the name of animation and the individual key frames for the animation,
			control the timing of advanced animations,
			control the execution of the steps of the animation

animationName   ------	*not realy explained, I think you give it a custom name similar to a function*
		
  ***	The animation name links the animation to a specific @keyframe rule	***
			
CAN ALSO USE THE KEYWORDS TO SHOW TRANSITIONS:
                                                                       			
	from { color: blue; } 	<-- START OF CYCLE --
	to { color: red; }	<-- END OF CYCLE  ---
-	-	-	-	-	-	-	-	-	-	-	-	-	-


the @keyframes allows you to add more steps to your animation by using a percentage that represents the completion of the animation


================================================H
						H
EXAMPLE:					H
						H
	@keyframes identifier { 		H
	0% {transform: rotate(100deg);} 	H
	30% {opacity: 1;} 			H
	50% {opacity: 0.50;} 			H
	70% {opacity: 1;} 			H
	100% {transform: rotate(50deg);} 	H
						H
================================================H

The different percentages used in the example demonstrate the progression of the animation. 
Note that it doesn’t have to be the same property that you modify in these steps. 
That's not possible using the transition property, but you can do it with @keyframes. 
This flexibility is what makes @keyframes so powerful. Another advantage is how these 
animations can also loop infinitely, run forwards, reverse and alternate.



animation property   ---create complex animation propery
			sub properties include


@keyframes are tied in with the animation-name to which they are going to be applied. 
To give an overview of the animation property, it consists of other sub-properties. 
Of these, ANIMATION-NAME and ANIMATION-DURATION must be defined while others such as 
timing-function, delay, direction, fill-more, iteration-count and so on can be added. 


		** NAME & DURATION MUST BE DEFINED **



			sub properties
		     ---------------------

THE DEFAULT PROPERTY: VALUES:

		animation-name: none 

		animation-duration: 0s 

		animation-timing-function: ease/linear/ease-in/ease-out

		animation-delay: 0s 
		
		animation-iteration-count: 1 		<--- how many times it plays.... iterates... DUHH!!!!

		animation-direction: normal 

		animation-fill-mode: none 

		animation-play-state: running 

		animation-timeline: auto 


	If the values of any of these are not defined, 
	you should assume that they are the default. 
	Of these, the first property of the animation-name 
	is what's used to tie it to the @keyframes rule.

---------------------------------------------------------------------------------------



	SHORTHAND CSS SYNTAX TO SET ALL THE SUB-PROPERTIES OF THE ANIMATION PROPERTY

========================================================================H
								    	H
		animation:						H
			div {						H
			  animation: myanimation 3s infinite;		H
			}						H
									H
========================================================================H
--*not realy explained, I think all <div> will be affected by the animation*--

-	-	-	-	-	-	-	-	-	-	- 	-	-	-


	BOUNCING BALL EXAMPLE
     ---------------------------

================================================================H
								H <-- bounce is declared as the animation name
@keyframes bounce {						H		<-- from is decalred as starting state
	from {							H <-- translate3d defines position of object in 3d space (x, y, z) axis
	   transform: translate3d(0, 0, 0);			H
	}							H
	to {							H <-- to is delcared as ending state
	  transfrom: translate3d(640px, 0, 0);			H
	}							H
}								H	
								H
#ball {								H
	width: 80px;						H <-- width, height are defined to give the div SPACE
	height: 80px;						H
	border-radius: 50%;					H <-- 50% radius rounds all edges..... makes the box a circle
	background-color: grey;					H
								H		<-- linear is defined to keep speed constant.... default ease slows and accelerates 
	animation: bounce 2s linear;				H <-- plays bounce animation over 2 seconds
	animation-direction: alternate;				H 		<-- alternate plays in reverse upon completion
	animation-iteration-count: infinite;			H <-- replays animation infinately
}								H
								H
================================================================H
















