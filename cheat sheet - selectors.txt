


		All selectors and their specificity



================================================================================




	p,h1,a	-------------	element type selectors
	#(unique id)	-----	select specific id from html
	.(unique class)	-----	selecet specific class from html
	[attr=value]	-----	select based of attribute or value
	parent:nth-child(n)	n child element after parent 
	parent:nth-of-type(n)	n type element after parent 
	*	-------------	select all elements of page
	



		attribute selectors
	      -------------------------

	  Selector		Syntax				Example

	[attribute]		[href] {}		Selects all elements with a href attribute

	[attribute=value]	[lang="fr"] {}		Selects all elements with lang attribute that has a value of "fr"

	[attribute~=value]	[input~=hello] {}	Elements with input attribute containing the whitespace separated substring "hello"

	[attribute|=value]	[lang|=en] {}		Elements with lang attribute value equal to "en" or "en-"(en hyphen)

	[attribute^=value]	a[href^="https"] {}	Every <a> element with href attribute value begins with "https"

	[attribute$=value]	a[href$=".docx"] {}	Every <a> element with href attribute value ends with ".docx"

	[attribute*=value]	a[href*="meta"] {}	Every <a> element with href attribute value has substring "meta"




		Group Selectors
	   ------------------------ 

You can group multiple selectors together within the the same 
declaration block to save time and manage code base. All the grouped
selectors are seperated by ' , '... a single comma.

EXAMPLE:

-	-	-	-	-	-

1)

h1, p {
	color: blue;
	text-align: center;
}

-	-	-	-	-	-




			Combination Selectors
		------------------------------------

	descendant slectors (using space)	
		used to select elements contained within another selector 

			#blog h1 {color: blue;}     <------ all h1 elements within the #blog will be blue

----------------------------------------------------------------------------------------------------------------------------

	child selector ( > )
		used to select the imidiate child element

			#blog > h1 {color: blue;}

------------------------------------------------------------------------------------------------------------------------------

	general sibling selectors ( ~ )
		apply rules to all element types that follow the element type,
		doesn't have to be imidiately after parent
			
			h1 ~ p {color: blue;}

------------------------------------------------------------------------------------------------------------------------------

	adjacent sibling selectors ( + )
		target the first element type following the target element
		only if target is imidiately after parent 

			div + p {color: blue;}





As you build a website, the complexity of the code might increase to such a point 
that more than one CSS rule is applied to the same element. Or, you might 
accidentally add more than one rule over the same element. This results in conflicts 
as only one rule can be applied to a specific property. For example, the color of a 
certain p tag can either be blue or white, but not both. CSS engines use something 
called specificity to resolve these conflicts. Specificity is the ranking or score 
that helps CSS determine the final rule that will be applied to a given element. 

This reading will help you grasp how the element with the ‘highest’ specificity 
is selected by CSS. But before you read on, it is important to note that these rules 
only apply in cases where conflicts arise for the properties. 



			Specificity hierarchy
		====================================

CSS has a set of rules that it uses to ‘score’ or assign a certain weight to 
selectors and this creates a specificity hierarchy. Based on the weights, 
there are four categories in this hierarchy: 

	Inline styles 

	IDs 

	Classes, attributes, and pseudo-classes 

	Elements and pseudo-elements 




			Inline styles
		----------------------------
Inline styles are attached to the elements within your HTML code like with the 
‘style’ attribute. inline styles have the highest specificity. That means that 
rules that are defined as inline styles will be applied irrespective of other rules. 

For example, take these two rules that create a conflict in color styling for a p tag:

-	-	-	-	-	-	-	-	-	-	

1)

 <p style=“color: white;”> 
p{color: blue} 

-	-	-	-	-	-	-	-	-	-

The p tag will be colored white because it is declared inside the inline tag. 


			IDs
		--------------------

Next in the hierarchy are IDs and by now you know that they are represented by ‘#’.  For example:

	#div



			 pseudo-classes
	  	   -------------------------

State based selectors. Used to improve the interactivity, like user input.

The order in which you document pseudo-classes will determine which style will be displayed.
Always follow the LVHA:

	LINK:	    VISITED:	 HOVER:		ACTIVE:



	selector :pseudo-class {property: value;}

	
		user action state
	     -------------------------


		:hover  --------- changes the state of element while curser hovers over it

		:active   ------- changes the state while user actively press and hold 

		:focus   -------- focus styleing on the element it targets

		:fullscreen   --- the element in full-screen mode

		


			Form State
		-------------------------

target the different state that elements can have. generally come in pairs

	

	:checked and :indeterminate
		generally used for check boxes

	:valid and :invalid
		used in fields like emails and phone numbers

	:default
		all default <input> elements.... input:default{}

	:disabled
		all disabled <input> elements... input:disabled{}

	:enabled	
		all enabled <input> elements.... input:enabled{}

	:optional
		elements with no "required" attribute
	
	:required
		elements with the 'required' attribute




			Web Link State
		----------------------------

Style links on web pages. Typically to change the color of links alread opened.



	:link
		changes the link element before visited
			a:link{color: blue;}
			
	:visited
		changes the link element after visiting
			a:visited{color: purple;}





			Specific position based state
		---------------------------------------------


Allow to target specific items.... like a specific list item amongst list items


	:first-child
		<p> elements who are the first child of it's parent element
			p:first-child{}

	:last-child
		<p> elements who are the last child of it's parent element
			p:last-child{}

	:only-child
		elements which are only child of a parent element
			p:only-child{}

	:nth-last-child()
		targets the <div> element which are the 3rd child of a parent, counting
		from the last position first
			div:nth-last-child(3)

	:nth-child()
		target the nth child of taget elements
			div:nth-child(3){}			

	:first-of-type
		target the first item of it's type, while the remaining items won't be affected
			li:first-of-type {color: lightseagreen}3
	:last-of-type
		target the last item of it's type
			p:last-of-type{}
		
	:nth-last-of-type()
		target the 2 last item of it's type, while the remaining items wont be affected
			p:last-of-type(2){}
	:nth-of-type()
		the nth sibling of a parent element
			p:nth-of-type(2){}

	:only-of-type
		targets the element that only THAT element inside it's parent
			p:only-of-type{}

	



			pseudo-element selectors
		  ------------------------------------


	:root
		select the root element of the document
			:root{}
	
	::first-letter
		alter the first letter of each element
			li::first-letter{color: coral;}

	::first-line
		alter the complete first line of each target element
			li::first-line{color: lightseagreen;}

	::selection
		alter specific text within target element. Useful when taking notes.
		typically see inverted colors from white-black to black-white
			li::selection{color: brown; background-color: antiquewhite;} 
	
	::marker
		used to add style element to a list... bullet points
			li::marker{content: '<>'; color: cornflowerblue;}

	::placeholder
		selects input elements with "placeholder" attribute specified
			input::placeholder{}

	:before 
		allow to add content before an element 
			#tips::before{background: darkkhaki; content: "Tips";}

	::after
		add content after an element
			#tips::after{background: darkkhaki; content: "!!";}

	:empty
		target element with no children
			div:empty{}

	:not()
		elements that are not of the target type
		:not(div){}
	




		Calculating scores
	   ============================

But by now you might wonder how is specificity calculated? 
CSS uses the hierarchical model internally to calculate the specificity 
of the selectors used on a web page. But often as the size of CSS code 
increases, developers unavoidably face rule conflicts. In these cases, 
developers use the specificity hierarchy to calculate the precedence of 
CSS rules and to control the outcome of their web pages. 

Let’s explore a practical example of how to determine the score of a few selectors. 


	#hello {} will be 0100

	div {} will be 0001 and

	div p.foo {} will be 0012


In the order stated above, the four categories will be assigned values 1000, 100, 10 
and 1 with the element selectors having the lowest value of 1. These scores will be 
calculated respectively for each element present inside the selector. The total score 
for these elements is then calculated and the one with the highest value has the 
highest specificity.

Let’s explore a couple of examples for clarity. Take note that the properties and 
values are not included in these examples to keep the focus on the selectors only. 




	element	=>	0 0 0 1 => score: 1

	.class	=>	0 0 1 0 => score 10

	#ID	=>	0 1 0 0 => score 100






Example 1

-	-	-	-	-	-	-

1)

p {} 
div p {}
div p.foo {}

-	-	-	-	-	-	-

	p  => 			1 element => 		0 0 0 1 => Score: 1

	div p => 		2 elements =>	 	0 0 0 2 => Score: 2

	div p.foo {} => 	2 elements and 		=> 0 0 1 2 => Score: 12
				1 class selector 


The third case has a total of 12 for the p tag and so has the highest specificity. 
The rules for the other two cases are then overridden and the rules inside the third case are applied. 


Example 2

	p#bar => 		1 element & 1 ID =>  	0 1 0 1 => Score: 101

	p.foo => 		1 element & 1 class => 	0 0 1 1 => Score: 11

	p.p.foo => 		1 element & 2 class =>  0 0 2 1 => Score: 21



By now it should be clear that the case containing ID has a much higher score and the rules 
inside it will be applied. Once you learn about the different pseudo-classes, pseudo-elements, 
and wide range of selectors later in this section, it will be easy to see why understanding 
specificity is important. 

While the weights assigned from the hierarchical structure help in a systematic approach, 
there are a few more guidelines and rules that become important especially in cases when 
the score for the different selectors is the same. Some of these are:

	Every selector will have a score and place in the hierarchy

	In the case of selectors with equal specificity, the latest or last 
	written rule is the one that will be applied

	In general, ID selector should be applied in cases where you need 
	to be certain about a rule 

	Universal selectors have zero specificity value

This reading only gave you an overview of specificity, but you should know that it is a 
much broader topic and also the underlying basis on which CSS engines work. That's what the 
'Cascading' in CSS means: the way in which CSS engines evaluate and apply the specificity 
rules is called ‘cascade’. Cascade is a type of small waterfall that falls in stages down 
the rocks and that is exactly how CSS behaves. 

Don’t be too worried about applying what you’ve learned now, there are CSS specificity 
calculators available that can help you with determining the styling outcomes of your pages. 










